/**                                                                                                                                                                                                                                                            
* This file was auto-generated by SAP Web IDE build and includes all                                                                                                                                                                                           
* the source files required by SAPUI5 runtime for performance optimization.                                                                                                                                                                                    
* PLEASE DO NOT EDIT THIS FILE!! Changes will be overwritten the next time the build is run.                                                                                                                                                                   
*/                                                                                                                                                                                                                                                             
jQuery.sap.registerPreloadedModules({                                                                                                                                                                                                                          
	"version": "2.0",                                                                                                                                                                                                                                             
	"name": "masterclass/ZDepartments/Component-preload",                                                                                                                                                                                                         
	"modules": {                                                                                                                                                                                                                                                  
		"masterclass/ZDepartments/Component.js": "/* global document */\r\nsap.ui.define([\r\n\t\t\"sap/ui/core/UIComponent\",\r\n\t\t\"sap/ui/Device\",\r\n\t\t\"masterclass/ZDepartments/model/models\",\r\n\t\t\"masterclass/ZDepartments/controller/ListSelector+
\",\r\n\t\t\"masterclass/ZDepartments/controller/ErrorHandler\"\r\n\t], function (UIComponent, Device, models, ListSelector, ErrorHandler) {\r\n\t\t\"use strict\";\r\n\r\n\t\treturn UIComponent.extend(\"masterclass.ZDepartments.Component\", {\r\n\r\n\t\t+
\tmetadata : {\r\n\t\t\t\tmanifest : \"json\"\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\r\n\t\t\t * In this method, the device models are set a+
nd the router is initialized.\r\n\t\t\t * @public\r\n\t\t\t * @override\r\n\t\t\t */\r\n\t\t\tinit : function () {\r\n\t\t\t\tthis.oListSelector = new ListSelector();\r\n\t\t\t\tthis._oErrorHandler = new ErrorHandler(this);\r\n\r\n\t\t\t\t// set the devi+
ce model\r\n\t\t\t\tthis.setModel(models.createDeviceModel(), \"device\");\r\n\r\n\t\t\t\t// call the base component's init function and create the App view\r\n\t\t\t\tUIComponent.prototype.init.apply(this, arguments);\r\n\r\n\t\t\t\t// create the views +
based on the url/hash\r\n\t\t\t\tthis.getRouter().initialize();\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * The component is destroyed by UI5 automatically.\r\n\t\t\t * In this method, the ListSelector and ErrorHandler are destroyed.\r\n\t\t\t * @public\r\n+
\t\t\t * @override\r\n\t\t\t */\r\n\t\t\tdestroy : function () {\r\n\t\t\t\tthis.oListSelector.destroy();\r\n\t\t\t\tthis._oErrorHandler.destroy();\r\n\t\t\t\t// call the base component's destroy function\r\n\t\t\t\tUIComponent.prototype.destroy.apply(th+
is, arguments);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy\r\n\t\t\t * design mode class should be set, which influences the size appearance of some controls.\r\n\t\t\t * +
@public\r\n\t\t\t * @return {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set\r\n\t\t\t */\r\n\t\t\tgetContentDensityClass : function() {\r\n\t\t\t\tif (this._sContentDensityClass === unde+
fined) {\r\n\t\t\t\t\t// check whether FLP has already set the content density class; do nothing in this case\r\n\t\t\t\t\tif (jQuery(document.body).hasClass(\"sapUiSizeCozy\") || jQuery(document.body).hasClass(\"sapUiSizeCompact\")) {\r\n\t\t\t\t\t\tthi+
s._sContentDensityClass = \"\";\r\n\t\t\t\t\t} else if (!Device.support.touch) { // apply \"compact\" mode if touch is not supported\r\n\t\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCompact\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// \"cozy\" in cas+
e of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table\r\n\t\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCozy\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn this._sContentDensityClass;\r\+
n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t}\r\n);",                                                                                                                                                                                                                     
		"masterclass/ZDepartments/localService/mockserver.js": "sap.ui.define([\r\n\t\t\"sap/ui/core/util/MockServer\"\r\n\t], function (MockServer) {\r\n\t\t\"use strict\";\r\n\r\n\t\tvar oMockServer,\r\n\t\t\t_sAppModulePath = \"masterclass/ZDepartments/\",\+
r\n\t\t\t_sJsonFilesModulePath = _sAppModulePath + \"localService/mockdata\";\r\n\r\n\t\treturn {\r\n\r\n\t\t\t/**\r\n\t\t\t * Initializes the mock server.\r\n\t\t\t * You can configure the delay with the URL parameter \"serverDelay\".\r\n\t\t\t * The lo+
cal mock data in this folder is returned instead of the real data for testing.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\r\n\t\t\tinit : function () {\r\n\t\t\t\tvar oUriParameters = jQuery.sap.getUriParameters(),\r\n\t\t\t\t\tsJsonFilesUrl = jQuery.sap.getMo+
dulePath(_sJsonFilesModulePath),\r\n\t\t\t\t\tsManifestUrl = jQuery.sap.getModulePath(_sAppModulePath + \"manifest\", \".json\"),\r\n\t\t\t\t\tsEntity = \"ZDEPARTMENTS_CDS\",\r\n\t\t\t\t\tsErrorParam = oUriParameters.get(\"errorType\"),\r\n\t\t\t\t\tiErr+
orCode = sErrorParam === \"badRequest\" ? 400 : 500,\r\n\t\t\t\t\toManifest = jQuery.sap.syncGetJSON(sManifestUrl).data,\r\n\t\t\t\t\toMainDataSource = oManifest[\"sap.app\"].dataSources.mainService,\r\n\t\t\t\t\tsMetadataUrl = jQuery.sap.getModulePath(_+
sAppModulePath + oMainDataSource.settings.localUri.replace(\".xml\", \"\"), \".xml\"),\r\n\t\t\t\t\t// ensure there is a trailing slash\r\n\t\t\t\t\tsMockServerUrl = /.*\\/$/.test(oMainDataSource.uri) ? oMainDataSource.uri : oMainDataSource.uri + \"/\";\+
r\n\r\n\t\t\t\toMockServer = new MockServer({\r\n\t\t\t\t\trootUri : sMockServerUrl\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// configure mock server with a delay of 1s\r\n\t\t\t\tMockServer.config({\r\n\t\t\t\t\tautoRespond : true,\r\n\t\t\t\t\tautoRespondAfter : +
(oUriParameters.get(\"serverDelay\") || 1000)\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Simulate a manual back-end call\r\n\t\t\t\toMockServer.simulate(sMetadataUrl, {\r\n\t\t\t\t\tsMockdataBaseUrl : sJsonFilesUrl,\r\n\t\t\t\t\tbGenerateMissingMockData : true\r\n+
\t\t\t\t});\r\n\r\n\t\t\t\tvar aRequests = oMockServer.getRequests(),\r\n\t\t\t\t\tfnResponse = function (iErrCode, sMessage, aRequest) {\r\n\t\t\t\t\t\taRequest.response = function(oXhr){\r\n\t\t\t\t\t\t\toXhr.respond(iErrCode, {\"Content-Type\": \"text+
/plain;charset=utf-8\"}, sMessage);\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t// handling the metadata error test\r\n\t\t\t\tif (oUriParameters.get(\"metadataError\")) {\r\n\t\t\t\t\taRequests.forEach( function ( aEntry ) {\r\n\t\t\t\t\t\tif (aEnt+
ry.path.toString().indexOf(\"$metadata\") > -1) {\r\n\t\t\t\t\t\t\tfnResponse(500, \"metadata Error\", aEntry);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Handling request errors\r\n\t\t\t\tif (sErrorParam) {\r\n\t\t\t\t\taRequests.+
forEach( function ( aEntry ) {\r\n\t\t\t\t\t\tif (aEntry.path.toString().indexOf(sEntity) > -1) {\r\n\t\t\t\t\t\t\tfnResponse(iErrorCode, sErrorParam, aEntry);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\toMockServer.setRequests(aRequests);\+
r\n\t\t\t\toMockServer.start();\r\n\r\n\t\t\t\tjQuery.sap.log.info(\"Running the app with mock data\");\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * @public returns the mockserver of the app, should be used in integration tests\r\n\t\t\t * @returns {sap.ui.c+
ore.util.MockServer} the mockserver instance\r\n\t\t\t */\r\n\t\t\tgetMockServer : function () {\r\n\t\t\t\treturn oMockServer;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}\r\n);",                                                                                        
		"masterclass/ZDepartments/controller/BaseController.js": "/*global history */\r\nsap.ui.define([\r\n\t\t\"sap/ui/core/mvc/Controller\",\r\n\t\t\"sap/ui/core/routing/History\"\r\n\t], function (Controller, History) {\r\n\t\t\"use strict\";\r\n\r\n\t\tre+
turn Controller.extend(\"masterclass.ZDepartments.controller.BaseController\", {\r\n\t\t\t/**\r\n\t\t\t * Convenience method for accessing the router in every controller of the application.\r\n\t\t\t * @public\r\n\t\t\t * @returns {sap.ui.core.routing.Ro+
uter} the router for this component\r\n\t\t\t */\r\n\t\t\tgetRouter : function () {\r\n\t\t\t\treturn this.getOwnerComponent().getRouter();\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Convenience method for getting the view model by name in every controller+
 of the application.\r\n\t\t\t * @public\r\n\t\t\t * @param {string} sName the model name\r\n\t\t\t * @returns {sap.ui.model.Model} the model instance\r\n\t\t\t */\r\n\t\t\tgetModel : function (sName) {\r\n\t\t\t\treturn this.getView().getModel(sName);\r+
\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Convenience method for setting the view model in every controller of the application.\r\n\t\t\t * @public\r\n\t\t\t * @param {sap.ui.model.Model} oModel the model instance\r\n\t\t\t * @param {string} sName the mode+
l name\r\n\t\t\t * @returns {sap.ui.mvc.View} the view instance\r\n\t\t\t */\r\n\t\t\tsetModel : function (oModel, sName) {\r\n\t\t\t\treturn this.getView().setModel(oModel, sName);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Convenience method for getting +
the resource bundle.\r\n\t\t\t * @public\r\n\t\t\t * @returns {sap.ui.model.resource.ResourceModel} the resourceModel of the component\r\n\t\t\t */\r\n\t\t\tgetResourceBundle : function () {\r\n\t\t\t\treturn this.getOwnerComponent().getModel(\"i18n\").g+
etResourceBundle();\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Event handler for navigating back.\r\n\t\t\t * It there is a history entry we go one step back in the browser history\r\n\t\t\t * If not, it will replace the current entry of the browser histor+
y with the master route.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tonNavBack : function() {\r\n\t\t\t\tvar sPreviousHash = History.getInstance().getPreviousHash();\r\n\r\n\t\t\t\t\tif (sPreviousHash !== undefined) {\r\n\t\t\t\t\thistory.go(-1);\r\n\t\t\t+
\t} else {\r\n\t\t\t\t\tthis.getRouter().navTo(\"master\", {}, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t}\r\n);",                                                                                                                                
		"masterclass/ZDepartments/view/App.view.xml": "<mvc:View\r\n\tcontrollerName=\"masterclass.ZDepartments.controller.App\"\r\n\txmlns:mvc=\"sap.ui.core.mvc\"\r\n\tdisplayBlock=\"true\"\r\n\tbusy=\"{appView>/busy}\"\r\n\tbusyIndicatorDelay=\"{appView>/del+
ay}\"\r\n\txmlns=\"sap.m\">\r\n\t<SplitApp id=\"idAppControl\" />\r\n</mvc:View>",                                                                                                                                                                             
		"masterclass/ZDepartments/view/Detail.view.xml": "<mvc:View\r\n\tcontrollerName=\"masterclass.ZDepartments.controller.Detail\"\r\n\txmlns=\"sap.m\"\r\n\txmlns:mvc=\"sap.ui.core.mvc\"\r\n\txmlns:semantic=\"sap.m.semantic\">\r\n\r\n\t<semantic:DetailPage+
\r\n\t\tid=\"page\"\r\n\t\tnavButtonPress=\"onNavBack\"\r\n\t\tshowNavButton=\"{device>/system/phone}\"\r\n\t\ttitle=\"{i18n>detailTitle}\"\r\n\t\tbusy=\"{detailView>/busy}\"\r\n\t\tbusyIndicatorDelay=\"{detailView>/delay}\">\r\n\r\n\t\t<semantic:content+
>\r\n\t\t\t<ObjectHeader\r\n\t\t\t\tid=\"objectHeader\"\r\n\t\t\t\ttitle=\"{department_name}\"\r\n>\r\n\t\t\t</ObjectHeader>\r\n\t\t\t<IconTabBar\r\n\t\t\t\tid=\"iconTabBar\"\r\n\t\t\t\tclass=\"sapUiResponsiveContentPadding\">\r\n\t\t\t\t<items>\r\n\t\t\+
t\t\t<IconTabFilter\r\n\t\t\t\t\t\tid=\"iconTabBarFilter1\"\r\n\t\t\t\t\t\ticon=\"sap-icon://hint\"\r\n\t\t\t\t\t\ttooltip=\"{i18n>detailIconTabBarInfo}\">\r\n\t\t\t\t\t</IconTabFilter>\r\n\t\t\t\t\t<IconTabFilter\r\n\t\t\t\t\t\tid=\"iconTabBarFilter2\"\+
r\n\t\t\t\t\t\ticon=\"sap-icon://attachment\"\r\n\t\t\t\t\t\ttooltip=\"{i18n>detailIconTabBarAttachments}\">\r\n\t\t\t\t\t</IconTabFilter>\r\n\t\t\t\t</items>\r\n\t\t\t</IconTabBar>\r\n\r\n\t\t</semantic:content>\r\n\r\n\t\t<semantic:sendEmailAction>\r\n+
\t\t\t<semantic:SendEmailAction\r\n\t\t\t\tid=\"shareEmail\"\r\n\t\t\t\tpress=\"onShareEmailPress\"/>\r\n\t\t</semantic:sendEmailAction>\r\n\r\n\t</semantic:DetailPage>\r\n\r\n</mvc:View>",                                                                  
		"masterclass/ZDepartments/view/Master.view.xml": "<mvc:View\r\n\tcontrollerName=\"masterclass.ZDepartments.controller.Master\"\r\n\txmlns:mvc=\"sap.ui.core.mvc\"\r\n\txmlns:core=\"sap.ui.core\"\r\n\txmlns=\"sap.m\"\r\n\txmlns:semantic=\"sap.m.semantic\+
">\r\n\r\n\t<semantic:MasterPage\r\n\t\tid=\"page\"\r\n\t\ttitle=\"{masterView>/title}\"\r\n\t\tnavButtonPress=\"onNavBack\"\r\n\t\tshowNavButton=\"true\">\r\n\t\t<semantic:subHeader>\r\n\t\t\t<Bar id=\"headerBar\">\r\n\t\t\t\t<contentMiddle>\r\n\t\t\t\t+
\t<SearchField\r\n\t\t\t\t\t\tid=\"searchField\"\r\n\t\t\t\t\t\tshowRefreshButton=\"{= !${device>/support/touch} }\"\r\n\t\t\t\t\t\ttooltip=\"{i18n>masterSearchTooltip}\"\r\n\t\t\t\t\t\twidth=\"100%\"\r\n\t\t\t\t\t\tsearch=\"onSearch\">\r\n\t\t\t\t\t</Se+
archField>\r\n\t\t\t\t</contentMiddle>\r\n\t\t\t</Bar>\r\n\t\t</semantic:subHeader>\r\n\r\n\t\t<semantic:content>\r\n\t\t\t<PullToRefresh\r\n\t\t\t\tid=\"pullToRefresh\"\r\n\t\t\t\tvisible=\"{device>/support/touch}\"\r\n\t\t\t\trefresh=\"onRefresh\" />\r+
\n\t\t\t<!-- For client side filtering add this to the items attribute: parameters: {operationMode: 'Client'}}\" -->\r\n\t\t\t<List\r\n\t\t\t\tid=\"list\"\r\n\t\t\t\titems=\"{\r\n\t\t\t\t\tpath: '/ZDEPARTMENTS_CDS',\r\n\t\t\t\t\tsorter: {\r\n\t\t\t\t\t\t+
path: 'department_name',\r\n\t\t\t\t\t\tdescending: false\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\tgroupHeaderFactory: '.createGroupHeader'\r\n\t\t\t\t}\"\r\n\t\t\t\tbusyIndicatorDelay=\"{masterView>/delay}\"\r\n\t\t\t\tnoDataText=\"{masterView>/noDataText}\"\r\n\+
t\t\t\tmode=\"{= ${device>/system/phone} ? 'None' : 'SingleSelectMaster'}\"\r\n\t\t\t\tgrowing=\"true\"\r\n\t\t\t\tgrowingScrollToLoad=\"true\"\r\n\t\t\t\tupdateFinished=\"onUpdateFinished\"\r\n\t\t\t\tselectionChange=\"onSelectionChange\">\r\n\t\t\t\t<i+
nfoToolbar>\r\n\t\t\t\t\t<Toolbar\r\n\t\t\t\t\t\tactive=\"true\"\r\n\t\t\t\t\t\tid=\"filterBar\"\r\n\t\t\t\t\t\tvisible=\"{masterView>/isFilterBarVisible}\"\r\n\t\t\t\t\t\tpress=\"onOpenViewSettings\">\r\n\t\t\t\t\t\t<Title\r\n\t\t\t\t\t\t\tid=\"filterBa+
rLabel\"\r\n\t\t\t\t\t\t\ttext=\"{masterView>/filterBarLabel}\" />\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t</infoToolbar>\r\n\t\t\t\t<items>\r\n\t\t\t\t\t<ObjectListItem\r\n\t\t\t\t\t\ttype=\"{= ${device>/system/phone} ? 'Active' : 'Inactive'}\"\r\n\t\t\t\t\t+
\tpress=\"onSelectionChange\"\r\n\t\t\t\t\t\ttitle=\"{department_name}\"\r\n>\r\n\t\t\t\t\t</ObjectListItem>\r\n\t\t\t\t</items>\r\n\t\t\t</List>\r\n\t\t</semantic:content>\r\n\r\n\t</semantic:MasterPage>\r\n\r\n</mvc:View>",                              
		"masterclass/ZDepartments/view/NotFound.view.xml": "<mvc:View\r\n\tcontrollerName=\"masterclass.ZDepartments.controller.BaseController\"\r\n\txmlns:mvc=\"sap.ui.core.mvc\"\r\n\txmlns=\"sap.m\">\r\n\r\n\t<MessagePage\r\n\t\tid=\"page\"\r\n\t\ttitle=\"{i+
18n>notFoundTitle}\"\r\n\t\ttext=\"{i18n>notFoundText}\"\r\n\t\ticon=\"{sap-icon://document}\"\r\n\t\tdescription=\"\"\r\n\t\tshowNavButton=\"{device>/system/phone}\"\r\n\t\tnavButtonPress=\"onNavBack\">\r\n\t</MessagePage>\r\n\r\n</mvc:View>",           
		"masterclass/ZDepartments/view/DetailObjectNotFound.view.xml": "<mvc:View\r\n\tcontrollerName=\"masterclass.ZDepartments.controller.BaseController\"\r\n\txmlns:mvc=\"sap.ui.core.mvc\"\r\n\txmlns=\"sap.m\">\r\n\r\n\t<MessagePage\r\n\t\tid=\"page\"\r\n\t+
\ttitle=\"{i18n>detailTitle}\"\r\n\t\ttext=\"{i18n>noObjectFoundText}\"\r\n\t\ticon=\"{sap-icon://product}\"\r\n\t\tdescription=\"\"\r\n\t\tshowNavButton=\"{device>/system/phone}\"\r\n\t\tnavButtonPress=\"onNavBack\">\r\n\t</MessagePage>\r\n\r\n</mvc:Vie+
w>",                                                                                                                                                                                                                                                           
		"masterclass/ZDepartments/view/DetailNoObjectsAvailable.view.xml": "<mvc:View\r\n\tcontrollerName=\"masterclass.ZDepartments.controller.BaseController\"\r\n\txmlns:mvc=\"sap.ui.core.mvc\"\r\n\txmlns=\"sap.m\">\r\n\r\n\t<MessagePage\r\n\t\tid=\"page\"\r+
\n\t\ttitle=\"{i18n>notAvailableViewTitle}\"\r\n\t\ttext=\"{i18n>noObjectsAvailableText}\"\r\n\t\ticon=\"{sap-icon://product}\"\r\n\t\tdescription=\"\"\r\n\t\tshowNavButton=\"{device>/system/phone}\"\r\n\t\tnavButtonPress=\"onNavBack\">\r\n\t</MessagePag+
e>\r\n\r\n</mvc:View>",                                                                                                                                                                                                                                        
		"masterclass/ZDepartments/view/ViewSettingsDialog.fragment.xml": "<core:FragmentDefinition\n\txmlns=\"sap.m\"\n\txmlns:core=\"sap.ui.core\">\n\n\t<ViewSettingsDialog\n\t\tid=\"viewSettingsDialog\"\n\t\tconfirm=\"onConfirmViewSettingsDialog\"\n\t\treset+
Filters=\"onViewSettingsDialogResetFilters\">\n\t\t<filterItems>\n\t\t\t<ViewSettingsFilterItem\n\t\t\t\tid=\"filterItems\"\n\t\t\t\ttext=\"{i18n>masterFilterName}\"\n\t\t\t\tkey=\"Price\"\n\t\t\t\tmultiSelect=\"false\">\n\t\t\t\t<items>\n\t\t\t\t\t<View+
SettingsItem\n\t\t\t\t\t\ttext=\"{i18n>masterFilter1}\"\n\t\t\t\t\t\tkey=\"Filter1\"\n\t\t\t\t\t\tid=\"viewFilter1\"/>\n\t\t\t\t\t<ViewSettingsItem\n\t\t\t\t\t\ttext=\"{i18n>masterFilter2}\"\n\t\t\t\t\t\tkey=\"Filter2\"\n\t\t\t\t\t\tid=\"viewFilter2\"/>\+
n\t\t\t\t</items>\n\t\t\t</ViewSettingsFilterItem>\n\t\t</filterItems>\n\t</ViewSettingsDialog>\n\n</core:FragmentDefinition>",                                                                                                                                
		"masterclass/ZDepartments/model/formatter.js": "sap.ui.define([\n\t], function () {\n\t\t\"use strict\";\n\n\t\treturn {\n\t\t\t/**\n\t\t\t * Rounds the currency value to 2 digits\n\t\t\t *\n\t\t\t * @public\n\t\t\t * @param {string} sValue value to be+
 formatted\n\t\t\t * @returns {string} formatted currency value with 2 digits\n\t\t\t */\n\t\t\tcurrencyValue : function (sValue) {\n\t\t\t\tif (!sValue) {\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\n\t\t\t\treturn parseFloat(sValue).toFixed(2);\n\t\t\t}\n\t\t+
};\n\n\t}\n);",                                                                                                                                                                                                                                                
		"masterclass/ZDepartments/model/models.js": "sap.ui.define([\n\t\t\"sap/ui/model/json/JSONModel\",\n\t\t\"sap/ui/Device\"\n\t], function (JSONModel, Device) {\n\t\t\"use strict\";\n\n\t\treturn {\n\t\t\tcreateDeviceModel : function () {\n\t\t\t\tvar oM+
odel = new JSONModel(Device);\n\t\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\t\treturn oModel;\n\t\t\t}\n\t\t};\n\n\t}\n);",                                                                                                                         
		"masterclass/ZDepartments/controller/ErrorHandler.js": "sap.ui.define([\r\n\t\t\"sap/ui/base/Object\",\r\n\t\t\"sap/m/MessageBox\"\r\n\t], function (UI5Object, MessageBox) {\r\n\t\t\"use strict\";\r\n\r\n\t\treturn UI5Object.extend(\"masterclass.ZDepar+
tments.controller.ErrorHandler\", {\r\n\r\n\t\t\t/**\r\n\t\t\t * Handles application errors by automatically attaching to the model events and displaying errors when needed.\r\n\t\t\t * @class\r\n\t\t\t * @param {sap.ui.core.UIComponent} oComponent refer+
ence to the app's component\r\n\t\t\t * @public\r\n\t\t\t * @alias masterclass.ZDepartments.controller.ErrorHandler\r\n\t\t\t */\r\n\t\t\tconstructor : function (oComponent) {\r\n\t\t\t\tthis._oResourceBundle = oComponent.getModel(\"i18n\").getResourceBu+
ndle();\r\n\t\t\t\tthis._oComponent = oComponent;\r\n\t\t\t\tthis._oModel = oComponent.getModel();\r\n\t\t\t\tthis._bMessageOpen = false;\r\n\t\t\t\tthis._sErrorText = this._oResourceBundle.getText(\"errorText\");\r\n\r\n\t\t\t\tthis._oModel.attachMetada+
taFailed(function (oEvent) {\r\n\t\t\t\t\tvar oParams = oEvent.getParameters();\r\n\t\t\t\t\tthis._showServiceError(oParams.response);\r\n\t\t\t\t}, this);\r\n\r\n\t\t\t\tthis._oModel.attachRequestFailed(function (oEvent) {\r\n\t\t\t\t\tvar oParams = oEv+
ent.getParameters();\r\n\t\t\t\t\t// An entity that was not found in the service is also throwing a 404 error in oData.\r\n\t\t\t\t\t// We already cover this case with a notFound target so we skip it here.\r\n\t\t\t\t\t// A request that cannot be sent to+
 the server is a technical error that we have to handle though\r\n\t\t\t\t\tif (oParams.response.statusCode !== \"404\" || (oParams.response.statusCode === 404 && oParams.response.responseText.indexOf(\"Cannot POST\") === 0)) {\r\n\t\t\t\t\t\tthis._showS+
erviceError(oParams.response);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Shows a {@link sap.m.MessageBox} when a service call has failed.\r\n\t\t\t * Only the first error message will be display.\r\n\t\t\t * @param {str+
ing} sDetails a technical error to be displayed on request\r\n\t\t\t * @private\r\n\t\t\t */\r\n\t\t\t_showServiceError : function (sDetails) {\r\n\t\t\t\tif (this._bMessageOpen) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis._bMessageOpen = true;\r+
\n\t\t\t\tMessageBox.error(\r\n\t\t\t\t\tthis._sErrorText,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid : \"serviceErrorMessageBox\",\r\n\t\t\t\t\t\tdetails : sDetails,\r\n\t\t\t\t\t\tstyleClass : this._oComponent.getContentDensityClass(),\r\n\t\t\t\t\t\tactions : [+
MessageBox.Action.CLOSE],\r\n\t\t\t\t\t\tonClose : function () {\r\n\t\t\t\t\t\t\tthis._bMessageOpen = false;\r\n\t\t\t\t\t\t}.bind(this)\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t}\r\n);",                                            
		"masterclass/ZDepartments/controller/Master.controller.js": "/*global history */\r\nsap.ui.define([\r\n\t\t\"masterclass/ZDepartments/controller/BaseController\",\r\n\t\t\"sap/ui/model/json/JSONModel\",\r\n\t\t\"sap/ui/model/Filter\",\r\n\t\t\"sap/ui/m+
odel/FilterOperator\",\r\n\t\t\"sap/m/GroupHeaderListItem\",\r\n\t\t\"sap/ui/Device\",\r\n\t\t\"masterclass/ZDepartments/model/formatter\"\r\n\t], function (BaseController, JSONModel, Filter, FilterOperator, GroupHeaderListItem, Device, formatter) {\r\n\+
t\t\"use strict\";\r\n\r\n\t\treturn BaseController.extend(\"masterclass.ZDepartments.controller.Master\", {\r\n\r\n\t\t\tformatter: formatter,\r\n\r\n\t\t\t/* =========================================================== */\r\n\t\t\t/* lifecycle methods  +
                                         */\r\n\t\t\t/* =========================================================== */\r\n\r\n\t\t\t/**\r\n\t\t\t * Called when the master list controller is instantiated. It sets up the event handling for the master/detai+
l communication and other lifecycle tasks.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tonInit : function () {\r\n\t\t\t\t// Control state model\r\n\t\t\t\tvar oList = this.byId(\"list\"),\r\n\t\t\t\t\toViewModel = this._createViewModel(),\r\n\t\t\t\t\t// P+
ut down master list's original value for busy indicator delay,\r\n\t\t\t\t\t// so it can be restored later on. Busy handling on the master list is\r\n\t\t\t\t\t// taken care of by the master list itself.\r\n\t\t\t\t\tiOriginalBusyDelay = oList.getBusyInd+
icatorDelay();\r\n\r\n\r\n\t\t\t\tthis._oList = oList;\r\n\t\t\t\t// keeps the filter and search state\r\n\t\t\t\tthis._oListFilterState = {\r\n\t\t\t\t\taFilter : [],\r\n\t\t\t\t\taSearch : []\r\n\t\t\t\t};\r\n\r\n\t\t\t\tthis.setModel(oViewModel, \"mas+
terView\");\r\n\t\t\t\t// Make sure, busy indication is showing immediately so there is no\r\n\t\t\t\t// break after the busy indication for loading the view's meta data is\r\n\t\t\t\t// ended (see promise 'oWhenMetadataIsLoaded' in AppController)\r\n\t\+
t\t\toList.attachEventOnce(\"updateFinished\", function(){\r\n\t\t\t\t\t// Restore original busy indicator delay for the list\r\n\t\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.getView().addEventDelega+
te({\r\n\t\t\t\t\tonBeforeFirstShow: function () {\r\n\t\t\t\t\t\tthis.getOwnerComponent().oListSelector.setBoundMasterList(oList);\r\n\t\t\t\t\t}.bind(this)\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.getRouter().getRoute(\"master\").attachPatternMatched(this._o+
nMasterMatched, this);\r\n\t\t\t\tthis.getRouter().attachBypassed(this.onBypassed, this);\r\n\t\t\t},\r\n\r\n\t\t\t/* =========================================================== */\r\n\t\t\t/* event handlers                                              *+
/\r\n\t\t\t/* =========================================================== */\r\n\r\n\t\t\t/**\r\n\t\t\t * After list data is available, this handler method updates the\r\n\t\t\t * master list counter and hides the pull to refresh control, if\r\n\t\t\t * +
necessary.\r\n\t\t\t * @param {sap.ui.base.Event} oEvent the update finished event\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tonUpdateFinished : function (oEvent) {\r\n\t\t\t\t// update the master list object counter after new data is loaded\r\n\t\t\t\tth+
is._updateListItemCount(oEvent.getParameter(\"total\"));\r\n\t\t\t\t// hide pull to refresh if necessary\r\n\t\t\t\tthis.byId(\"pullToRefresh\").hide();\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Event handler for the master search field. Applies current\r+
\n\t\t\t * filter value and triggers a new search. If the search field's\r\n\t\t\t * 'refresh' button has been pressed, no new search is triggered\r\n\t\t\t * and the list binding is refresh instead.\r\n\t\t\t * @param {sap.ui.base.Event} oEvent the sear+
ch event\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tonSearch : function (oEvent) {\r\n\t\t\t\tif (oEvent.getParameters().refreshButtonPressed) {\r\n\t\t\t\t\t// Search field's 'refresh' button has been pressed.\r\n\t\t\t\t\t// This is visible if you selec+
t any master list item.\r\n\t\t\t\t\t// In this case no new search is triggered, we only\r\n\t\t\t\t\t// refresh the list binding.\r\n\t\t\t\t\tthis.onRefresh();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar sQuery = oEvent.getParameter(\"query\")+
;\r\n\r\n\t\t\t\tif (sQuery) {\r\n\t\t\t\t\tthis._oListFilterState.aSearch = [new Filter(\"department_name\", FilterOperator.Contains, sQuery)];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._oListFilterState.aSearch = [];\r\n\t\t\t\t}\r\n\t\t\t\tthis._applyFilt+
erSearch();\r\n\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Event handler for refresh event. Keeps filter, sort\r\n\t\t\t * and group settings and refreshes the list binding.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tonRefresh : function () {\r\n\t\t\t\tthi+
s._oList.getBinding(\"items\").refresh();\r\n\t\t\t},\r\n\r\n\r\n\r\n\t\t\t/**\r\n\t\t\t * Event handler for the list selection event\r\n\t\t\t * @param {sap.ui.base.Event} oEvent the list selectionChange event\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\to+
nSelectionChange : function (oEvent) {\r\n\t\t\t\t// get the list item, either from the listItem parameter or from the event's source itself (will depend on the device-dependent mode).\r\n\t\t\t\tthis._showDetail(oEvent.getParameter(\"listItem\") || oEve+
nt.getSource());\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Event handler for the bypassed event, which is fired when no routing pattern matched.\r\n\t\t\t * If there was an object selected in the master list, that selection is removed.\r\n\t\t\t * @public+
\r\n\t\t\t */\r\n\t\t\tonBypassed : function () {\r\n\t\t\t\tthis._oList.removeSelections(true);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Used to create GroupHeaders with non-capitalized caption.\r\n\t\t\t * These headers are inserted into the master lis+
t to\r\n\t\t\t * group the master list's items.\r\n\t\t\t * @param {Object} oGroup group whose text is to be displayed\r\n\t\t\t * @public\r\n\t\t\t * @returns {sap.m.GroupHeaderListItem} group header with non-capitalized caption.\r\n\t\t\t */\r\n\t\t\tc+
reateGroupHeader : function (oGroup) {\r\n\t\t\t\treturn new GroupHeaderListItem({\r\n\t\t\t\t\ttitle : oGroup.text,\r\n\t\t\t\t\tupperCase : false\r\n\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Event handler for navigating back.\r\n\t\t\t * We +
navigate back in the browser historz\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tonNavBack : function() {\r\n\t\t\t\thistory.go(-1);\r\n\t\t\t},\r\n\r\n\t\t\t/* =========================================================== */\r\n\t\t\t/* begin: internal meth+
ods                                     */\r\n\t\t\t/* =========================================================== */\r\n\r\n\r\n\t\t\t_createViewModel : function() {\r\n\t\t\t\treturn new JSONModel({\r\n\t\t\t\t\tisFilterBarVisible: false,\r\n\t\t\t\t\t+
filterBarLabel: \"\",\r\n\t\t\t\t\tdelay: 0,\r\n\t\t\t\t\ttitle: this.getResourceBundle().getText(\"masterTitleCount\", [0]),\r\n\t\t\t\t\tnoDataText: this.getResourceBundle().getText(\"masterListNoDataText\"),\r\n\t\t\t\t\tsortBy: \"department_name\",\r+
\n\t\t\t\t\tgroupBy: \"None\"\r\n\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * If the master route was hit (empty hash) we have to set\r\n\t\t\t * the hash to to the first item in the list as soon as the\r\n\t\t\t * listLoading is done and the fir+
st item in the list is known\r\n\t\t\t * @private\r\n\t\t\t */\r\n\t\t\t_onMasterMatched :  function() {\r\n\t\t\t\tthis.getOwnerComponent().oListSelector.oWhenListLoadingIsDone.then(\r\n\t\t\t\t\tfunction (mParams) {\r\n\t\t\t\t\t\tif (mParams.list.getM+
ode() === \"None\") {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar sObjectId = mParams.firstListitem.getBindingContext().getProperty(\"department_id\");\r\n\t\t\t\t\t\tthis.getRouter().navTo(\"object\", {objectId : sObjectId}, true);\r\n\+
t\t\t\t\t}.bind(this),\r\n\t\t\t\t\tfunction (mParams) {\r\n\t\t\t\t\t\tif (mParams.error) {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.getRouter().getTargets().display(\"detailNoObjectsAvailable\");\r\n\t\t\t\t\t}.bind(this)\r\n\t\t\t+
\t);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Shows the selected item on the detail page\r\n\t\t\t * On phones a additional history entry is created\r\n\t\t\t * @param {sap.m.ObjectListItem} oItem selected Item\r\n\t\t\t * @private\r\n\t\t\t */\r\n\t\t\t+
_showDetail : function (oItem) {\r\n\t\t\t\tvar bReplace = !Device.system.phone;\r\n\t\t\t\tthis.getRouter().navTo(\"object\", {\r\n\t\t\t\t\tobjectId : oItem.getBindingContext().getProperty(\"department_id\")\r\n\t\t\t\t}, bReplace);\r\n\t\t\t},\r\n\r\n+
\t\t\t/**\r\n\t\t\t * Sets the item count on the master list header\r\n\t\t\t * @param {integer} iTotalItems the total number of items in the list\r\n\t\t\t * @private\r\n\t\t\t */\r\n\t\t\t_updateListItemCount : function (iTotalItems) {\r\n\t\t\t\tvar s+
Title;\r\n\t\t\t\t// only update the counter if the length is final\r\n\t\t\t\tif (this._oList.getBinding(\"items\").isLengthFinal()) {\r\n\t\t\t\t\tsTitle = this.getResourceBundle().getText(\"masterTitleCount\", [iTotalItems]);\r\n\t\t\t\t\tthis.getMode+
l(\"masterView\").setProperty(\"/title\", sTitle);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Internal helper method to apply both filter and search state together on the list binding\r\n\t\t\t * @private\r\n\t\t\t */\r\n\t\t\t_applyFilterSear+
ch : function () {\r\n\t\t\t\tvar aFilters = this._oListFilterState.aSearch.concat(this._oListFilterState.aFilter),\r\n\t\t\t\t\toViewModel = this.getModel(\"masterView\");\r\n\t\t\t\tthis._oList.getBinding(\"items\").filter(aFilters, \"Application\");\r+
\n\t\t\t\t// changes the noDataText of the list in case there are no filter results\r\n\t\t\t\tif (aFilters.length !== 0) {\r\n\t\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataWithFilterOrSearchText\"))+
;\r\n\t\t\t\t} else if (this._oListFilterState.aSearch.length > 0) {\r\n\t\t\t\t\t// only reset the no data text to default when no new search was triggered\r\n\t\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterLis+
tNoDataText\"));\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Internal helper method to apply both group and sort state together on the list binding\r\n\t\t\t * @param {sap.ui.model.Sorter[]} aSorters an array of sorters\r\n\t\t\t * @private\r\n+
\t\t\t */\r\n\t\t\t_applyGroupSort : function (aSorters) {\r\n\t\t\t\tthis._oList.getBinding(\"items\").sort(aSorters);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Internal helper method that sets the filter bar visibility property and the label's caption t+
o be shown\r\n\t\t\t * @param {string} sFilterBarText the selected filter value\r\n\t\t\t * @private\r\n\t\t\t */\r\n\t\t\t_updateFilterBar : function (sFilterBarText) {\r\n\t\t\t\tvar oViewModel = this.getModel(\"masterView\");\r\n\t\t\t\toViewModel.set+
Property(\"/isFilterBarVisible\", (this._oListFilterState.aFilter.length > 0));\r\n\t\t\t\toViewModel.setProperty(\"/filterBarLabel\", this.getResourceBundle().getText(\"masterFilterBarText\", [sFilterBarText]));\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t}\r\n)+
;",                                                                                                                                                                                                                                                            
		"masterclass/ZDepartments/controller/Detail.controller.js": "/*global location */\r\nsap.ui.define([\r\n\t\t\"masterclass/ZDepartments/controller/BaseController\",\r\n\t\t\"sap/ui/model/json/JSONModel\",\r\n\t\t\"masterclass/ZDepartments/model/formatte+
r\"\r\n\t], function (BaseController, JSONModel, formatter) {\r\n\t\t\"use strict\";\r\n\r\n\t\treturn BaseController.extend(\"masterclass.ZDepartments.controller.Detail\", {\r\n\r\n\t\t\tformatter: formatter,\r\n\r\n\t\t\t/* ============================+
=============================== */\r\n\t\t\t/* lifecycle methods                                           */\r\n\t\t\t/* =========================================================== */\r\n\r\n\t\t\tonInit : function () {\r\n\t\t\t\t// Model used to manip+
ulate control states. The chosen values make sure,\r\n\t\t\t\t// detail page is busy indication immediately so there is no break in\r\n\t\t\t\t// between the busy indication for loading the view's meta data\r\n\t\t\t\tvar oViewModel = new JSONModel({\r\n+
\t\t\t\t\tbusy : false,\r\n\t\t\t\t\tdelay : 0\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.getRouter().getRoute(\"object\").attachPatternMatched(this._onObjectMatched, this);\r\n\r\n\t\t\t\tthis.setModel(oViewModel, \"detailView\");\r\n\r\n\t\t\t\tthis.getOwnerCo+
mponent().getModel().metadataLoaded().then(this._onMetadataLoaded.bind(this));\r\n\t\t\t},\r\n\r\n\t\t\t/* =========================================================== */\r\n\t\t\t/* event handlers                                              */\r\n\t\t\t+
/* =========================================================== */\r\n\r\n\t\t\t/**\r\n\t\t\t * Event handler when the share by E-Mail button has been clicked\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tonShareEmailPress : function () {\r\n\t\t\t\tvar oView+
Model = this.getModel(\"detailView\");\r\n\r\n\t\t\t\tsap.m.URLHelper.triggerEmail(\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\toViewModel.getProperty(\"/shareSendEmailSubject\"),\r\n\t\t\t\t\toViewModel.getProperty(\"/shareSendEmailMessage\")\r\n\t\t\t\t);\r\n\t\t\+
t},\r\n\r\n\r\n\r\n\t\t\t/* =========================================================== */\r\n\t\t\t/* begin: internal methods                                     */\r\n\t\t\t/* =========================================================== */\r\n\r\n\t\t\t+
/**\r\n\t\t\t * Binds the view to the object path and expands the aggregated line items.\r\n\t\t\t * @function\r\n\t\t\t * @param {sap.ui.base.Event} oEvent pattern match event in route 'object'\r\n\t\t\t * @private\r\n\t\t\t */\r\n\t\t\t_onObjectMatched+
 : function (oEvent) {\r\n\t\t\t\tvar sObjectId =  oEvent.getParameter(\"arguments\").objectId;\r\n\t\t\t\tthis.getModel().metadataLoaded().then( function() {\r\n\t\t\t\t\tvar sObjectPath = this.getModel().createKey(\"ZDEPARTMENTS_CDS\", {\r\n\t\t\t\t\t\+
tdepartment_id :  sObjectId\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis._bindView(\"/\" + sObjectPath);\r\n\t\t\t\t}.bind(this));\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Binds the view to the object path. Makes sure that detail view displays\r\n\t\t\t * a busy i+
ndicator while data for the corresponding element binding is loaded.\r\n\t\t\t * @function\r\n\t\t\t * @param {string} sObjectPath path to the object to be bound to the view.\r\n\t\t\t * @private\r\n\t\t\t */\r\n\t\t\t_bindView : function (sObjectPath) {+
\r\n\t\t\t\t// Set busy indicator during view binding\r\n\t\t\t\tvar oViewModel = this.getModel(\"detailView\");\r\n\r\n\t\t\t\t// If the view was not bound yet its not busy, only if the binding requests data it is set to busy again\r\n\t\t\t\toViewModel+
.setProperty(\"/busy\", false);\r\n\r\n\t\t\t\tthis.getView().bindElement({\r\n\t\t\t\t\tpath : sObjectPath,\r\n\t\t\t\t\tevents: {\r\n\t\t\t\t\t\tchange : this._onBindingChange.bind(this),\r\n\t\t\t\t\t\tdataRequested : function () {\r\n\t\t\t\t\t\t\toV+
iewModel.setProperty(\"/busy\", true);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tdataReceived: function () {\r\n\t\t\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t\t_onBindingChange : func+
tion () {\r\n\t\t\t\tvar oView = this.getView(),\r\n\t\t\t\t\toElementBinding = oView.getElementBinding();\r\n\r\n\t\t\t\t// No data for the binding\r\n\t\t\t\tif (!oElementBinding.getBoundContext()) {\r\n\t\t\t\t\tthis.getRouter().getTargets().display(\+
"detailObjectNotFound\");\r\n\t\t\t\t\t// if object could not be found, the selection in the master list\r\n\t\t\t\t\t// does not make sense anymore.\r\n\t\t\t\t\tthis.getOwnerComponent().oListSelector.clearMasterListSelection();\r\n\t\t\t\t\treturn;\r\n+
\t\t\t\t}\r\n\r\n\t\t\t\tvar sPath = oElementBinding.getPath(),\r\n\t\t\t\t\toResourceBundle = this.getResourceBundle(),\r\n\t\t\t\t\toObject = oView.getModel().getObject(sPath),\r\n\t\t\t\t\tsObjectId = oObject.department_id,\r\n\t\t\t\t\tsObjectName = +
oObject.department_name,\r\n\t\t\t\t\toViewModel = this.getModel(\"detailView\");\r\n\r\n\t\t\t\tthis.getOwnerComponent().oListSelector.selectAListItem(sPath);\r\n\r\n\t\t\t\toViewModel.setProperty(\"/shareSendEmailSubject\",\r\n\t\t\t\t\toResourceBundle+
.getText(\"shareSendEmailObjectSubject\", [sObjectId]));\r\n\t\t\t\toViewModel.setProperty(\"/shareSendEmailMessage\",\r\n\t\t\t\t\toResourceBundle.getText(\"shareSendEmailObjectMessage\", [sObjectName, sObjectId, location.href]));\r\n\t\t\t},\r\n\r\n\t\+
t\t_onMetadataLoaded : function () {\r\n\t\t\t\t// Store original busy indicator delay for the detail view\r\n\t\t\t\tvar iOriginalViewBusyDelay = this.getView().getBusyIndicatorDelay(),\r\n\t\t\t\t\toViewModel = this.getModel(\"detailView\");\r\n\r\n\t\+
t\t\t// Make sure busy indicator is displayed immediately when\r\n\t\t\t\t// detail view is displayed for the first time\r\n\t\t\t\toViewModel.setProperty(\"/delay\", 0);\r\n\r\n\t\t\t\t// Binding the view will set it to not busy - so the view is always +
busy if it is not bound\r\n\t\t\t\toViewModel.setProperty(\"/busy\", true);\r\n\t\t\t\t// Restore original busy indicator delay for the detail view\r\n\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalViewBusyDelay);\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t+
}\r\n);",                                                                                                                                                                                                                                                      
		"masterclass/ZDepartments/controller/App.controller.js": "sap.ui.define([\r\n\t\t\"masterclass/ZDepartments/controller/BaseController\",\r\n\t\t\"sap/ui/model/json/JSONModel\"\r\n\t], function (BaseController, JSONModel) {\r\n\t\t\"use strict\";\r\n\r\+
n\t\treturn BaseController.extend(\"masterclass.ZDepartments.controller.App\", {\r\n\r\n\t\t\tonInit : function () {\r\n\t\t\t\tvar oViewModel,\r\n\t\t\t\t\tfnSetAppNotBusy,\r\n\t\t\t\t\toListSelector = this.getOwnerComponent().oListSelector,\r\n\t\t\t\t+
\tiOriginalBusyDelay = this.getView().getBusyIndicatorDelay();\r\n\r\n\t\t\t\toViewModel = new JSONModel({\r\n\t\t\t\t\tbusy : true,\r\n\t\t\t\t\tdelay : 0\r\n\t\t\t\t});\r\n\t\t\t\tthis.setModel(oViewModel, \"appView\");\r\n\r\n\t\t\t\tfnSetAppNotBusy =+
 function() {\r\n\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\r\n\t\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// since then() has no \"reject\"-path attach to the MetadataFailed-Event to disable th+
e busy indicator in case of an error\r\n\t\t\t\tthis.getOwnerComponent().getModel().metadataLoaded().\r\n\t\t\t\t\t\tthen(fnSetAppNotBusy);\r\n\t\t\t\tthis.getOwnerComponent().getModel().attachMetadataFailed(fnSetAppNotBusy);\r\n\r\n\r\n\t\t\t\t// Makes +
sure that master view is hidden in split app\r\n\t\t\t\t// after a new list entry has been selected.\r\n\t\t\t\toListSelector.attachListSelectionChange(function () {\r\n\t\t\t\t\tthis.byId(\"idAppControl\").hideMaster();\r\n\t\t\t\t}, this);\r\n\r\n\t\t\+
t\t// apply content density mode to root view\r\n\t\t\t\tthis.getView().addStyleClass(this.getOwnerComponent().getContentDensityClass());\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t}\r\n);",                                                                         
		"masterclass/ZDepartments/controller/ListSelector.js": "sap.ui.define([\r\n\t\t\"sap/ui/base/Object\",\r\n\t\t\"sap/m/GroupHeaderListItem\"\r\n\t], function (BaseObject, GroupHeaderListItem) {\r\n\t\t\"use strict\";\r\n\t\treturn BaseObject.extend(\"ma+
sterclass.ZDepartments.controller.ListSelector\", {\r\n\r\n\t\t\t/**\r\n\t\t\t * Provides a convenience API for selecting list items. All the functions will wait until the initial load of the a List passed to the instance by the setBoundMasterList\r\n\t\+
t\t * function.\r\n\t\t\t * @class\r\n\t\t\t * @public\r\n\t\t\t * @alias masterclass.ZDepartments.controller.ListSelector\r\n\t\t\t */\r\n\r\n\t\t\tconstructor : function () {\r\n\t\t\t\tthis._oWhenListHasBeenSet = new Promise(function (fnResolveListHas+
BeenSet) {\r\n\t\t\t\t\tthis._fnResolveListHasBeenSet = fnResolveListHasBeenSet;\r\n\t\t\t\t}.bind(this));\r\n\t\t\t\t// This promise needs to be created in the constructor, since it is allowed to\r\n\t\t\t\t// invoke selectItem functions before calling +
setBoundMasterList\r\n\t\t\t\tthis.oWhenListLoadingIsDone = new Promise(function (fnResolve, fnReject) {\r\n\t\t\t\t\t// Used to wait until the setBound masterList function is invoked\r\n\t\t\t\t\tthis._oWhenListHasBeenSet\r\n\t\t\t\t\t\t.then(function (+
oList) {\r\n\t\t\t\t\t\t\toList.getBinding(\"items\").attachEventOnce(\"dataReceived\",\r\n\t\t\t\t\t\t\t\tfunction (oData) {\r\n\t\t\t\t\t\t\t\t\tif (!oData.getParameter(\"data\")) {\r\n\t\t\t\t\t\t\t\t\t\tfnReject({\r\n\t\t\t\t\t\t\t\t\t\t\tlist : oLis+
t,\r\n\t\t\t\t\t\t\t\t\t\t\terror : true\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tvar oFirstListItem = this.getFirstListItem();\r\n\t\t\t\t\t\t\t\t\tif (oFirstListItem) {\r\n\t\t\t\t\t\t\t\t\t\t// Have to make sure that firs+
t list Item is selected\r\n\t\t\t\t\t\t\t\t\t\t// and a select event is triggered. Like that, the corresponding\r\n\t\t\t\t\t\t\t\t\t\t// detail page is loaded automatically\r\n\t\t\t\t\t\t\t\t\t\tfnResolve({\r\n\t\t\t\t\t\t\t\t\t\t\tlist : oList,\r\n\t\+
t\t\t\t\t\t\t\t\t\tfirstListitem : oFirstListItem\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t// No items in the list\r\n\t\t\t\t\t\t\t\t\t\tfnReject({\r\n\t\t\t\t\t\t\t\t\t\t\tlist : oList,\r\n\t\t\t\t\t\t\t\t\t\t\ter+
ror : false\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}.bind(this)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}.bind(this));\r\n\t\t\t\t}.bind(this));\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * A bound list should be passed in here. Shou+
ld be done, before the list has received its initial data from the server.\r\n\t\t\t * May only be invoked once per ListSelector instance.\r\n\t\t\t * @param {sap.m.List} oList The list all the select functions will be invoked on.\r\n\t\t\t * @public\r\n+
\t\t\t */\r\n\t\t\tsetBoundMasterList : function (oList) {\r\n\t\t\t\tthis._oList = oList;\r\n\t\t\t\tthis._fnResolveListHasBeenSet(oList);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Finds the first list item\r\n\t\t\t * @return {sap.m.ListItem|null} The f+
irst item that is not a group header\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tgetFirstListItem : function () {\r\n\t\t\t\tvar aItems = this._oList.getItems();\r\n\r\n\t\t\t\tfor (var i = 0; i < aItems.length; i++) {\r\n\t\t\t\t\tif (!(aItems[i] instance+
of GroupHeaderListItem)) {\r\n\t\t\t\t\t\treturn aItems[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Tries to select and scroll to a list item with a matching binding context. If there are no items matc+
hing the binding context or the ListMode is none,\r\n\t\t\t * no selection/scrolling will happen\r\n\t\t\t * @param {string} sBindingPath the binding path matching the binding path of a list item\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tselectAListItem +
: function (sBindingPath) {\r\n\r\n\t\t\t\tthis.oWhenListLoadingIsDone.then(\r\n\t\t\t\t\tfunction () {\r\n\t\t\t\t\t\tvar oList = this._oList,\r\n\t\t\t\t\t\t\toSelectedItem;\r\n\r\n\t\t\t\t\t\tif (oList.getMode() === \"None\") {\r\n\t\t\t\t\t\t\treturn+
;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\toSelectedItem = oList.getSelectedItem();\r\n\r\n\t\t\t\t\t\t// skip update if the current selection is already matching the object path\r\n\t\t\t\t\t\tif (oSelectedItem && oSelectedItem.getBindingContext().getPath() +
=== sBindingPath) {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\toList.getItems().some(function (oItem) {\r\n\t\t\t\t\t\t\tif (oItem.getBindingContext() && oItem.getBindingContext().getPath() === sBindingPath) {\r\n\t\t\t\t\t\t\t\toList.s+
etSelectedItem(oItem);\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}.bind(this),\r\n\t\t\t\t\tfunction () {\r\n\t\t\t\t\t\tjQuery.sap.log.warning(\"Could not select the list item with the path\" + sBindingPath + \" +
because the list encountered an error or had no items\");\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\r\n\t\t\t/* =========================================================== */\r\n\t\t\t/* Convenience Functions for List Selection Change Event       +
*/\r\n\t\t\t/* =========================================================== */\r\n\r\n\t\t\t/**\r\n\t\t\t * Attaches a listener and listener function to the ListSelector's bound master list. By using\r\n\t\t\t * a promise, the listener is added, even if t+
he list is not available when 'attachListSelectionChange'\r\n\t\t\t * is called.\r\n\t\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\r\n\t\t\t * @param {function} oListener the listener object+
\r\n\t\t\t * @return {masterclass.ZDepartments.model.ListSelector} the list selector object for method chaining\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tattachListSelectionChange : function (fnFunction, oListener) {\r\n\t\t\t\tthis._oWhenListHasBeenSet.+
then(function () {\r\n\t\t\t\t\tthis._oList.attachSelectionChange(fnFunction, oListener);\r\n\t\t\t\t}.bind(this));\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Detaches a listener and listener function from the ListSelector's bound m+
aster list. By using\r\n\t\t\t * a promise, the listener is removed, even if the list is not available when 'detachListSelectionChange'\r\n\t\t\t * is called.\r\n\t\t\t * @param {function} fnFunction the function to be executed when the list fires a sele+
ction change event\r\n\t\t\t * @param {function} oListener the listener object\r\n\t\t\t * @return {masterclass.ZDepartments.model.ListSelector} the list selector object for method chaining\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tdetachListSelectionCha+
nge : function (fnFunction, oListener) {\r\n\t\t\t\tthis._oWhenListHasBeenSet.then(function () {\r\n\t\t\t\t\tthis._oList.detachSelectionChange(fnFunction, oListener);\r\n\t\t\t\t}.bind(this));\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t+
\t * Removes all selections from master list.\r\n\t\t\t * Does not trigger 'selectionChange' event on master list, though.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tclearMasterListSelection : function () {\r\n\t\t\t\t//use promise to make sure that 'this+
._oList' is available\r\n\t\t\t\tthis._oWhenListHasBeenSet.then(function () {\r\n\t\t\t\t\tthis._oList.removeSelections(true);\r\n\t\t\t\t}.bind(this));\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t}\r\n);"                                                           
	}                                                                                                                                                                                                                                                             
});                                                                                                                                                                                                                                                            