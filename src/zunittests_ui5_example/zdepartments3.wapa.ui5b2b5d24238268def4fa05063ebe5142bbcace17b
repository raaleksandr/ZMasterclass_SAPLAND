/**                                                                                                                                                                                                                                                            
* This file was auto-generated by SAP Web IDE build and includes all                                                                                                                                                                                           
* the source files required by SAPUI5 runtime for performance optimization.                                                                                                                                                                                    
* PLEASE DO NOT EDIT THIS FILE!! Changes will be overwritten the next time the build is run.                                                                                                                                                                   
*/                                                                                                                                                                                                                                                             
jQuery.sap.registerPreloadedModules({                                                                                                                                                                                                                          
	"version": "2.0",                                                                                                                                                                                                                                             
	"name": "masterclass/Component-preload",                                                                                                                                                                                                                      
	"modules": {                                                                                                                                                                                                                                                  
		"masterclass/Component.js": "sap.ui.define([\n\t\"sap/ui/core/UIComponent\",\n\t\"sap/ui/Device\",\n\t\"masterclass/model/models\",\n\t\"masterclass/controller/ListSelector\",\n\t\"masterclass/controller/ErrorHandler\"\n], function(UIComponent, Device,+
 models, ListSelector, ErrorHandler) {\n\t\"use strict\";\n\n\treturn UIComponent.extend(\"masterclass.Component\", {\n\n\t\tmetadata: {\n\t\t\tmanifest: \"json\"\n\t\t},\n\n\t\t/**\n\t\t * The component is initialized by UI5 automatically during the sta+
rtup of the app and calls the init method once.\n\t\t * In this method, the FLP and device models are set and the router is initialized.\n\t\t * @public\n\t\t * @override\n\t\t */\n\t\tinit: function() {\n\t\t\tthis.oListSelector = new ListSelector();\n\+
t\t\tthis._oErrorHandler = new ErrorHandler(this);\n\n\t\t\t// set the device model\n\t\t\tthis.setModel(models.createDeviceModel(), \"device\");\n\t\t\t// set the FLP model\n\t\t\tthis.setModel(models.createFLPModel(), \"FLP\");\n\n\t\t\t// call the bas+
e component's init function and create the App view\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\n\t\t\t// create the views based on the url/hash\n\t\t\tthis.getRouter().initialize();\n\t\t},\n\n\t\t/**\n\t\t * The component is destroyed b+
y UI5 automatically.\n\t\t * In this method, the ListSelector and ErrorHandler are destroyed.\n\t\t * @public\n\t\t * @override\n\t\t */\n\t\tdestroy: function() {\n\t\t\tthis.oListSelector.destroy();\n\t\t\tthis._oErrorHandler.destroy();\n\t\t\t// call +
the base component's destroy function\n\t\t\tUIComponent.prototype.destroy.apply(this, arguments);\n\t\t},\n\n\t\t/**\n\t\t * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy\n\t\t * design mode class should be set, wh+
ich influences the size appearance of some controls.\n\t\t * @public\n\t\t * @return {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set\n\t\t */\n\t\tgetContentDensityClass: function() {\n\+
t\t\tif (this._sContentDensityClass === undefined) {\n\t\t\t\t// check whether FLP has already set the content density class; do nothing in this case\n\t\t\t\tif (jQuery(document.body).hasClass(\"sapUiSizeCozy\") || jQuery(document.body).hasClass(\"sapUi+
SizeCompact\")) {\n\t\t\t\t\tthis._sContentDensityClass = \"\";\n\t\t\t\t} else if (!Device.support.touch) { // apply \"compact\" mode if touch is not supported\n\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCompact\";\n\t\t\t\t} else {\n\t\t\t\t\t//+
 \"cozy\" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table\n\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCozy\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._sContentDensityClass;\n\+
t\t}\n\n\t});\n\n});",                                                                                                                                                                                                                                         
		"masterclass/view/NotFound.view.xml": "<mvc:View controllerName=\"masterclass.controller.BaseController\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n\t<MessagePage id=\"page\" title=\"{i18n>notFoundTitle}\" text=\"{i18n>notFoundText}\" icon=\"{sap+
-icon://document}\" description=\"\"\n\t\tshowNavButton=\"{device>/system/phone}\" navButtonPress=\"onNavBack\"></MessagePage>\n</mvc:View>",                                                                                                                  
		"masterclass/controller/ErrorHandler.js": "sap.ui.define([\n\t\"sap/ui/base/Object\",\n\t\"sap/m/MessageBox\"\n], function(UI5Object, MessageBox) {\n\t\"use strict\";\n\n\treturn UI5Object.extend(\"masterclass.controller.ErrorHandler\", {\n\n\t\t/**\n\+
t\t * Handles application errors by automatically attaching to the model events and displaying errors when needed.\n\t\t * @class\n\t\t * @param {sap.ui.core.UIComponent} oComponent reference to the app's component\n\t\t * @public\n\t\t * @alias mastercl+
ass.controller.ErrorHandler\n\t\t */\n\t\tconstructor: function(oComponent) {\n\t\t\tthis._oResourceBundle = oComponent.getModel(\"i18n\").getResourceBundle();\n\t\t\tthis._oComponent = oComponent;\n\t\t\tthis._oModel = oComponent.getModel();\n\t\t\tthis+
._bMessageOpen = false;\n\t\t\tthis._sErrorText = this._oResourceBundle.getText(\"errorText\");\n\n\t\t\tthis._oModel.attachMetadataFailed(function(oEvent) {\n\t\t\t\tvar oParams = oEvent.getParameters();\n\n\t\t\t\tthis._showMetadataError(oParams.respon+
se);\n\t\t\t}, this);\n\n\t\t\tthis._oModel.attachRequestFailed(this.onRequestFailed, this);\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =+
========================================================== */\n\n\t\t/**\n\t\t * Event Handler for Request Fail event\n\t\t * The user can try to refresh the metadata.\n\t\t * @param {object} oEvent an event containing the response data\n\t\t * @private\+
n\t\t */\n\t\tonRequestFailed: function(oEvent) {\n\t\t\tvar oParams = oEvent.getParameters();\n\n\t\t\t// An entity that was not found in the service is also throwing a 404 error in oData.\n\t\t\t// We already cover this case with a notFound target so w+
e skip it here.\n\t\t\t// A request that cannot be sent to the server is a technical error that we have to handle though\n\t\t\tif ((oParams.response.statusCode !== \"404\") || (oParams.response.statusCode === 404 &&\n\t\t\t\t\toParams.response.responseT+
ext.indexOf(\"Cannot POST\") === 0)) {\n\t\t\t\tthis._showServiceError(oParams.response);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Shows a {@link sap.m.MessageBox} when the metadata call has failed.\n\t\t * The user can try to refresh the metadata.\n\t\t * @p+
aram {string} sDetails a technical error to be displayed on request\n\t\t * @private\n\t\t */\n\t\t_showMetadataError: function(sDetails) {\n\t\t\tMessageBox.error(\n\t\t\t\tthis._sErrorText, {\n\t\t\t\t\tid: \"metadataErrorMessageBox\",\n\t\t\t\t\tdetai+
ls: sDetails,\n\t\t\t\t\tstyleClass: this._oComponent.getContentDensityClass(),\n\t\t\t\t\tactions: [MessageBox.Action.RETRY, MessageBox.Action.CLOSE],\n\t\t\t\t\tonClose: function(sAction) {\n\t\t\t\t\t\tif (sAction === MessageBox.Action.RETRY) {\n\t\t\+
t\t\t\t\tthis._oModel.refreshMetadata();\n\t\t\t\t\t\t}\n\t\t\t\t\t}.bind(this)\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Shows a {@link sap.m.MessageBox}.\n\t\t * The user can try to refresh the metadata.\n\t\t * @param {string} sTitle the Message+
Box title, {string} sMessageHeader and {string} sDetails a technical error to be displayed on request\n\t\t * @private\n\t\t */\n\t\t_showErrorMsg: function(sTitle, sMessageHeader, sDetails) {\n\n\t\t\tMessageBox.error(\n\t\t\t\tsMessageHeader, {\n\t\t\t+
\t\tid: \"ErrorMessageBox\",\n\t\t\t\t\ttitle: sTitle,\n\t\t\t\t\tdetails: sDetails,\n\t\t\t\t\ticon: MessageBox.Icon.ERROR,\n\t\t\t\t\tstyleClass: this._oComponent.getContentDensityClass(),\n\t\t\t\t\tactions: MessageBox.Action.CLOSE\n\n\t\t\t\t}\n\t\t\+
t);\n\t\t},\n\n\t\t/**\n\t\t * Shows a {@link sap.m.MessageBox} when a service call has failed.\n\t\t * Only the first error message will be display.\n\t\t * @param {string} sDetails a technical error to be displayed on request\n\t\t * @private\n\t\t */\+
n\t\t_showServiceError: function(sDetails) {\n\t\t\tif (this._bMessageOpen) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._bMessageOpen = true;\n\t\t\tMessageBox.error(\n\t\t\t\tthis._sErrorText, {\n\t\t\t\t\tid: \"serviceErrorMessageBox\",\n\t\t\t\t\tdetails:+
 sDetails.responseText,\n\t\t\t\t\tstyleClass: this._oComponent.getContentDensityClass(),\n\t\t\t\t\tactions: [MessageBox.Action.CLOSE],\n\t\t\t\t\tonClose: function() {\n\t\t\t\t\t\tthis._bMessageOpen = false;\n\t\t\t\t\t}.bind(this)\n\t\t\t\t}\n\t\t\t)+
;\n\t\t}\n\t});\n\n});",                                                                                                                                                                                                                                       
		"masterclass/controller/CreateEntity.controller.js": "sap.ui.define([\n\t\"masterclass/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/m/MessageBox\",\n\t\"masterclass/model/ZInputChecker\"\n], function(BaseController, JSONMod+
el, MessageBox, ZInputChecker) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"masterclass.controller.CreateEntity\", {\n\n\t\t_oBinding: {},\n\n\t\t/* =========================================================== */\n\t\t/* lifecycle methods     +
                                      */\n\t\t/* =========================================================== */\n\n\t\tonInit: function() {\n\t\t\tvar that = this;\n\t\t\tthis.getRouter().getTargets().getTarget(\"create\").attachDisplay(null, this._onDis+
play, this);\n\t\t\tthis._oODataModel = this.getOwnerComponent().getModel();\n\t\t\tthis._oResourceBundle = this.getResourceBundle();\n\t\t\tthis._oViewModel = new JSONModel({\n\t\t\t\tenableCreate: false,\n\t\t\t\tdelay: 0,\n\t\t\t\tbusy: false,\n\t\t\t+
\tmode: \"create\",\n\t\t\t\tviewTitle: \"\"\n\t\t\t});\n\t\t\tthis.setModel(this._oViewModel, \"viewModel\");\n\n\t\t\t// Register the view with the message manager\n\t\t\tsap.ui.getCore().getMessageManager().registerObject(this.getView(), true);\n\t\t\+
tvar oMessagesModel = sap.ui.getCore().getMessageManager().getMessageModel();\n\t\t\tthis._oBinding = new sap.ui.model.Binding(oMessagesModel, \"/\", oMessagesModel.getContext(\"/\"));\n\t\t\tthis._oBinding.attachChange(function(oEvent) {\n\t\t\t\tvar aM+
essages = oEvent.getSource().getModel().getData();\n\t\t\t\tfor (var i = 0; i < aMessages.length; i++) {\n\t\t\t\t\tif (aMessages[i].type === \"Error\" && !aMessages[i].technical) {\n\t\t\t\t\t\tthat._oViewModel.setProperty(\"/enableCreate\", false);\n\t+
\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tthis._ZInputChecker = new ZInputChecker();\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* ====+
======================================================= */\n\n\t\t/**\n\t\t * Event handler (attached declaratively) for the view save button. Saves the changes added by the user. \n\t\t * @function\n\t\t * @public\n\t\t */\n\t\tonSave: function() {\n\t\+
t\tvar that = this,\n\t\t\t\toModel = this.getModel();\n\n\t\t\t// abort if the  model has not been changed\n\t\t\tif (!oModel.hasPendingChanges()) {\n\t\t\t\tMessageBox.information(\n\t\t\t\t\tthis._oResourceBundle.getText(\"noChangesMessage\"), {\n\t\t+
\t\t\t\tid: \"noChangesInfoMessageBox\",\n\t\t\t\t\t\tstyleClass: that.getOwnerComponent().getContentDensityClass()\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.getModel(\"appView\").setProperty(\"/busy\", true);\n\t\t\tif (this._oViewM+
odel.getProperty(\"/mode\") === \"edit\") {\n\t\t\t\t// attach to the request completed event of the batch\n\t\t\t\toModel.attachEventOnce(\"batchRequestCompleted\", function(oEvent) {\n\t\t\t\t\tif (that._checkIfBatchRequestSucceeded(oEvent)) {\n\t\t\t\+
t\t\tthat._fnUpdateSuccess();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthat._fnEntityCreationFailed();\n\t\t\t\t\t\tMessageBox.error(that._oResourceBundle.getText(\"updateError\"));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\toModel.submitChanges();\n\t\t},\n\n\t\+
t_checkIfBatchRequestSucceeded: function(oEvent) {\n\t\t\tvar oParams = oEvent.getParameters();\n\t\t\tvar aRequests = oEvent.getParameters().requests;\n\t\t\tvar oRequest;\n\t\t\tif (oParams.success) {\n\t\t\t\tif (aRequests) {\n\t\t\t\t\tfor (var i = 0+
; i < aRequests.length; i++) {\n\t\t\t\t\t\toRequest = oEvent.getParameters().requests[i];\n\t\t\t\t\t\tif (!oRequest.success) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn fal+
se;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Event handler (attached declaratively) for the view cancel button. Asks the user confirmation to discard the changes. \n\t\t * @function\n\t\t * @public\n\t\t */\n\t\tonCancel: function() {\n\t\t\t// check if the m+
odel has been changed\n\t\t\tif (this.getModel().hasPendingChanges()) {\n\t\t\t\t// get user confirmation first\n\t\t\t\tthis._showConfirmQuitChanges(); // some other thing here....\n\t\t\t} else {\n\t\t\t\tthis.getModel(\"appView\").setProperty(\"/addEn+
abled\", true);\n\t\t\t\t// cancel without confirmation\n\t\t\t\tthis._navBack();\n\t\t\t}\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* Internal functions\n\t\t/* ===============================================+
============ */\n\t\t/**\n\t\t * Navigates back in the browser history, if the entry was created by this app.\n\t\t * If not, it navigates to the Details page\n\t\t * @private\n\t\t */\n\t\t_navBack: function() {\n\t\t\tvar oHistory = sap.ui.core.routing+
.History.getInstance(),\n\t\t\t\tsPreviousHash = oHistory.getPreviousHash();\n\n\t\t\tthis.getView().unbindObject();\n\t\t\tif (sPreviousHash !== undefined) {\n\t\t\t\t// The history contains a previous entry\n\t\t\t\thistory.go(-1);\n\t\t\t} else {\n\t\+
t\t\tthis.getRouter().getTargets().display(\"object\");\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Opens a dialog letting the user either confirm or cancel the quit and discard of changes.\n\t\t * @private\n\t\t */\n\t\t_showConfirmQuitChanges: function() {\n\t+
\t\tvar oComponent = this.getOwnerComponent(),\n\t\t\t\toModel = this.getModel();\n\t\t\tvar that = this;\n\t\t\tMessageBox.confirm(\n\t\t\t\tthis._oResourceBundle.getText(\"confirmCancelMessage\"), {\n\t\t\t\t\tstyleClass: oComponent.getContentDensityCl+
ass(),\n\t\t\t\t\tonClose: function(oAction) {\n\t\t\t\t\t\tif (oAction === sap.m.MessageBox.Action.OK) {\n\t\t\t\t\t\t\tthat.getModel(\"appView\").setProperty(\"/addEnabled\", true);\n\t\t\t\t\t\t\toModel.resetChanges();\n\t\t\t\t\t\t\tthat._navBack();\+
n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Prepares the view for editing the selected object\n\t\t * @param {sap.ui.base.Event} oEvent the  display event\n\t\t * @private\n\t\t */\n\t\t_onEdit: function(oEvent) {\n\t\t\tv+
ar oData = oEvent.getParameter(\"data\"),\n\t\t\t\toView = this.getView();\n\t\t\tthis._oViewModel.setProperty(\"/mode\", \"edit\");\n\t\t\tthis._oViewModel.setProperty(\"/enableCreate\", true);\n\t\t\tthis._oViewModel.setProperty(\"/viewTitle\", this._o+
ResourceBundle.getText(\"editViewTitle\"));\n\n\t\t\toView.bindElement({\n\t\t\t\tpath: oData.objectPath\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Prepares the view for creating new object\n\t\t * @param {sap.ui.base.Event} oEvent the  display event\n\t\t * +
@private\n\t\t */\n\n\t\t_onCreate: function(oEvent) {\n\t\t\tif (oEvent.getParameter(\"name\") && oEvent.getParameter(\"name\") !== \"create\") {\n\t\t\t\tthis._oViewModel.setProperty(\"/enableCreate\", false);\n\t\t\t\tthis.getRouter().getTargets().det+
achDisplay(null, this._onDisplay, this);\n\t\t\t\tthis.getView().unbindObject();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._oViewModel.setProperty(\"/viewTitle\", this._oResourceBundle.getText(\"createViewTitle\"));\n\t\t\tthis._oViewModel.setProperty(\"/m+
ode\", \"create\");\n\t\t\tvar oContext = this._oODataModel.createEntry(\"ZDEPARTMENTS_CDS\", {\n\t\t\t\tsuccess: this._fnEntityCreated.bind(this),\n\t\t\t\terror: this._fnEntityCreationFailed.bind(this)\n\t\t\t});\n\t\t\tthis.getView().setBindingContext+
(oContext);\n\t\t},\n\n\t\t/**\n\t\t * Checks if the save button can be enabled\n\t\t * @private\n\t\t */\n\t\t_validateSaveEnablement: function(oEvent) {\n\t\t\tvar aInputControls = this._getFormFields(this.byId(\"newEntitySimpleForm\"));\n\t\t\tvar oCo+
ntrol;\n\t\t\tfor (var m = 0; m < aInputControls.length; m++) {\n\t\t\t\toControl = aInputControls[m].control;\n\t\t\t\tif (aInputControls[m].required) {\n\t\t\t\t\tvar sValue = oControl.getValue();\n\t\t\t\t\tif (!sValue) {\n\t\t\t\t\t\tthis._oViewModel+
.setProperty(\"/enableCreate\", false);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(!this._ZCheckValues(oEvent)) {\n\t\t\t\tthis._oViewModel.setProperty(\"/enableCreate\", false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tthis.+
_checkForErrorMessages();\n\t\t},\n\n\t\t/**\n\t\t * Checks if there is any wrong inputs that can not be saved.\n\t\t * @private\n\t\t */\n\n\t\t_checkForErrorMessages: function() {\n\t\t\tvar aMessages = this._oBinding.oModel.oData;\n\t\t\tif (aMessages+
.length > 0) {\n\t\t\t\tvar bEnableCreate = true;\n\t\t\t\tfor (var i = 0; i < aMessages.length; i++) {\n\t\t\t\t\tif (aMessages[i].type === \"Error\" && !aMessages[i].technical) {\n\t\t\t\t\t\tbEnableCreate = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\+
t\t\t}\n\t\t\t\tthis._oViewModel.setProperty(\"/enableCreate\", bEnableCreate);\n\t\t\t} else {\n\t\t\t\tthis._oViewModel.setProperty(\"/enableCreate\", true);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Handles the success of updating an object\n\t\t * @private+
\n\t\t */\n\t\t_fnUpdateSuccess: function() {\n\t\t\tthis.getModel(\"appView\").setProperty(\"/busy\", false);\n\t\t\tthis.getView().unbindObject();\n\t\t\tthis.getRouter().getTargets().display(\"object\");\n\t\t},\n\n\t\t/**\n\t\t * Handles the success +
of creating an object\n\t\t *@param {object} oData the response of the save action\n\t\t * @private\n\t\t */\n\t\t_fnEntityCreated: function(oData) {\n\t\t\tvar sObjectPath = this.getModel().createKey(\"ZDEPARTMENTS_CDS\", oData);\n\t\t\tthis.getModel(\"+
appView\").setProperty(\"/itemToSelect\", \"/\" + sObjectPath); //save last created\n\t\t\tthis.getModel(\"appView\").setProperty(\"/busy\", false);\n\t\t\tthis.getRouter().getTargets().display(\"object\");\n\t\t},\n\n\t\t/**\n\t\t * Handles the failure +
of creating/updating an object\n\t\t * @private\n\t\t */\n\t\t_fnEntityCreationFailed: function() {\n\t\t\tthis.getModel(\"appView\").setProperty(\"/busy\", false);\n\t\t},\n\n\t\t/**\n\t\t * Handles the onDisplay event which is triggered when this view +
is displayed \n\t\t * @param {sap.ui.base.Event} oEvent the on display event\n\t\t * @private\n\t\t */\n\t\t_onDisplay: function(oEvent) {\n\t\t\tvar oData = oEvent.getParameter(\"data\");\n\t\t\tif (oData && oData.mode === \"update\") {\n\t\t\t\tthis._o+
nEdit(oEvent);\n\t\t\t} else {\n\t\t\t\tthis._onCreate(oEvent);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Gets the form fields\n\t\t * @param {sap.ui.layout.form} oSimpleForm the form in the view.\n\t\t * @private\n\t\t */\n\t\t_getFormFields: function(oSimple+
Form) {\n\t\t\tvar aControls = [];\n\t\t\tvar aFormContent = oSimpleForm.getContent();\n\t\t\tvar sControlType;\n\t\t\tfor (var i = 0; i < aFormContent.length; i++) {\n\t\t\t\tsControlType = aFormContent[i].getMetadata().getName();\n\t\t\t\tif (sControlT+
ype === \"sap.m.Input\" || sControlType === \"sap.m.DateTimeInput\" ||\n\t\t\t\t\tsControlType === \"sap.m.CheckBox\") {\n\t\t\t\t\taControls.push({\n\t\t\t\t\t\tcontrol: aFormContent[i],\n\t\t\t\t\t\trequired: aFormContent[i - 1].getRequired && aFormCon+
tent[i - 1].getRequired()\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn aControls;\n\t\t},\n\t\t\n\t\t_ZCheckValues: function(oEventLiveChange) {\n\t\t\tvar fieldDepartmentAddress = this.getView().byId(\"department_address_id\");\n\t\t\tvar fieldDepar+
tmentRoom = this.getView().byId(\"department_room_id\");\n\t\t\tthis._ZInputChecker.set_department_address(fieldDepartmentAddress.getValue());\n\t\t\tthis._ZInputChecker.set_department_room(fieldDepartmentRoom.getValue());\n\t\t\t//var departmentAddress +
= this.getView().byId(\"department_address_id\").getValue();\n\t\t\t//var departmentRoom = this.getView().byId(\"department_room_id\").getValue();\n\t\t\t\n\t\t\t/*var currentFieldName = oEventLiveChange.oSource.mProperties['name'];\n\t\t\tvar currentInp+
utValue = oEventLiveChange.getParameter('value');\n\t\t\t\n\t\t\tswitch(currentFieldName) {\n\t\t\t\tcase 'department_address':\n\t\t\t\t\tthis._ZInputChecker.set_department_address(currentInputValue);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'department_room':\n+
\t\t\t\t\tthis._ZInputChecker.set_department_room(currentInputValue);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t*/\n\t\t\t\n\t\t\tthis._ZInputChecker.check_input();\n\t\t\t\n\t\t\tfieldDepartmentRoom.setValueState(this._ZInputChecker.get_department_room_state())+
;\n\t\t\tfieldDepartmentRoom.setValueStateText(this._ZInputChecker.get_department_room_state_text());\n\t\t\t\n\t\t\t//var fieldName = oEventLiveChange.oSource.mProperties['name'];\n\t\t\t\n\t\t\t//if(fieldName === \"department_room\") {\n\t\t\t//\toEven+
tLiveChange.getSource().setValueState(this._ZInputChecker.get_department_room_state());\n\t\t\t//\toEventLiveChange.getSource().setValueStateText(this._ZInputChecker.get_department_room_state_text());\n\t\t\t//}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\treturn !thi+
s._ZInputChecker.get_is_error();\n\t\t\t\n\t\t\t/*var v = this.getView();\n\t\t\tvar txtDepartmentAddress = v.byId(\"department_address_id\");\n\t\t\tif(fieldName === \"department_room\") {\n\t\t\t\tvar inputValue = oEventLiveChange.getParameter('value')+
;\n\t\t\t\tif(!txtDepartmentAddress.getValue() && inputValue)\n\t\t\t\t{\n\t\t\t\t\t//alert('too bad');\n\t\t\t\t\toEventLiveChange.getSource().setValueState(\"Error\");\n\t\t\t\t\toEventLiveChange.getSource().setValueStateText(\"too bad\");\n\t\t\t\t}\n+
\t\t\t}*/\n\t\t\t\n\t\t\t//alert(inputValue);\n\t\t\t/*var messageManager = this._oBinding.oModel.oMessageManager;\n\t\t\tmessageManager.addMessages(\n    new sap.ui.core.message.Message({\n        message: \"ZIP codes must have at least 23 digits\",\n  +
      type: sap.ui.core.MessageType.Error,\n        target: \"/department_room/value\"\n        //processor: oMessageProcessor\n     })\n);\n*/\n\t\t}\n\t});\n\n});",                                                                                         
		"masterclass/controller/Master.controller.js": "/*global history */\nsap.ui.define([\n\t\"masterclass/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/m/GroupHeade+
rListItem\",\n\t\"sap/ui/Device\",\n\t\"masterclass/model/formatter\",\n\t\"sap/m/MessageBox\"\n], function(BaseController, JSONModel, Filter, FilterOperator, GroupHeaderListItem, Device, formatter, MessageBox) {\n\t\"use strict\";\n\n\treturn BaseContro+
ller.extend(\"masterclass.controller.Master\", {\n\n\t\tformatter: formatter,\n\n\t\t/* =========================================================== */\n\t\t/* lifecycle methods                                           */\n\t\t/* ========================+
=================================== */\n\n\t\t/**\n\t\t * Called when the master list controller is instantiated. It sets up the event handling for the master/detail communication and other lifecycle tasks.\n\t\t * @public\n\t\t */\n\t\tonInit: function(+
) {\n\t\t\t// Control state model\n\t\t\tvar oList = this.byId(\"list\"),\n\t\t\t\toViewModel = this._createViewModel(),\n\t\t\t\t// Put down master list's original value for busy indicator delay,\n\t\t\t\t// so it can be restored later on. Busy handling+
 on the master list is\n\t\t\t\t// taken care of by the master list itself.\n\t\t\t\tiOriginalBusyDelay = oList.getBusyIndicatorDelay();\n\t\t\tthis._oListSelector = this.getOwnerComponent().oListSelector;\n\n\t\t\tthis._oList = oList;\n\t\t\t// keeps th+
e filter and search state\n\t\t\tthis._oListFilterState = {\n\t\t\t\taFilter: [],\n\t\t\t\taSearch: []\n\t\t\t};\n\n\t\t\tthis.setModel(oViewModel, \"masterView\");\n\t\t\t// Make sure, busy indication is showing immediately so there is no\n\t\t\t// brea+
k after the busy indication for loading the view's meta data is\n\t\t\t// ended (see promise 'oWhenMetadataIsLoaded' in AppController)\n\t\t\toList.attachEventOnce(\"updateFinished\", function() {\n\t\t\t\t// Restore original busy indicator delay for the+
 list\n\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\n\t\t\t});\n\n\t\t\tthis.getView().addEventDelegate({\n\t\t\t\tonBeforeFirstShow: function() {\n\t\t\t\t\tthis._oListSelector.setBoundMasterList(oList);\n\t\t\t\t}.bind(this)\n\t\t\t}+
);\n\n\t\t\tthis.getRouter().getRoute(\"master\").attachPatternMatched(this._onMasterMatched, this);\n\t\t\tthis.getRouter().attachBypassed(this.onBypassed, this);\n\t\t\tthis._oODataModel = this.getOwnerComponent().getModel();\n\t\t},\n\n\t\t/* ========+
=================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * After list data is available, this han+
dler method updates the\n\t\t * master list counter and hides the pull to refresh control, if\n\t\t * necessary.\n\t\t * @param {sap.ui.base.Event} oEvent the update finished event\n\t\t * @public\n\t\t */\n\t\tonUpdateFinished: function(oEvent) {\n\t\t\+
t// update the master list object counter after new data is loaded\n\t\t\tthis._updateListItemCount(oEvent.getParameter(\"total\"));\n\t\t\t// hide pull to refresh if necessary\n\t\t\tthis.byId(\"pullToRefresh\").hide();\n\t\t\tthis._findItem();\n\t\t\tt+
his.getModel(\"appView\").setProperty(\"/addEnabled\", true);\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the master search field. Applies current\n\t\t * filter value and triggers a new search. If the search field's\n\t\t * 'refresh' button has been pr+
essed, no new search is triggered\n\t\t * and the list binding is refresh instead.\n\t\t * @param {sap.ui.base.Event} oEvent the search event\n\t\t * @public\n\t\t */\n\t\tonSearch: function(oEvent) {\n\t\t\tif (oEvent.getParameters().refreshButtonPresse+
d) {\n\t\t\t\t// Search field's 'refresh' button has been pressed.\n\t\t\t\t// This is visible if you select any master list item.\n\t\t\t\t// In this case no new search is triggered, we only\n\t\t\t\t// refresh the list binding.\n\t\t\t\tthis.onRefresh(+
);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar sQuery = oEvent.getParameter(\"query\");\n\n\t\t\tif (sQuery) {\n\t\t\t\tthis._oListFilterState.aSearch = [new Filter(\"department_name\", FilterOperator.Contains, sQuery)];\n\t\t\t} else {\n\t\t\t\tthis._oListFi+
lterState.aSearch = [];\n\t\t\t}\n\t\t\tthis._applyFilterSearch();\n\n\t\t},\n\n\t\t/**\n\t\t * Event handler for refresh event. Keeps filter, sort\n\t\t * and group settings and refreshes the list binding.\n\t\t * @public\n\t\t */\n\t\tonRefresh: functi+
on() {\n\t\t\tthis._oList.getBinding(\"items\").refresh();\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the sorter selection.\n\t\t * @param {sap.ui.base.Event} oEvent the select event\n\t\t * @public\n\t\t */\n\t\tonSort: function(oEvent) {\n\t\t\tvar s+
Key = oEvent.getSource().getSelectedItem().getKey(),\n\t\t\t\taSorters = this._oGroupSortState.sort(sKey);\n\n\t\t\tthis._applyGroupSort(aSorters);\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the list selection event\n\t\t * @param {sap.ui.base.Event} o+
Event the list selectionChange event\n\t\t * @public\n\t\t */\n\t\tonSelectionChange: function(oEvent) {\n\t\t\tvar that = this;\n\t\t\tvar oItem = oEvent.getParameter(\"listItem\") || oEvent.getSource();\n\t\t\tvar fnLeave = function() {\n\t\t\t\tthat._+
oODataModel.resetChanges();\n\t\t\t\tthat._showDetail(oItem);\n\t\t\t};\n\t\t\tif (this._oODataModel.hasPendingChanges()) {\n\t\t\t\tthis._leaveEditPage(fnLeave);\n\t\t\t} else {\n\t\t\t\tthis._showDetail(oItem);\n\t\t\t}\n\t\t\tthat.getModel(\"appView\"+
).setProperty(\"/addEnabled\", true);\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the bypassed event, which is fired when no routing pattern matched.\n\t\t * If there was an object selected in the master list, that selection is removed.\n\t\t * @public\+
n\t\t */\n\t\tonBypassed: function() {\n\t\t\tthis._oList.removeSelections(true);\n\t\t},\n\n\t\t/**\n\t\t * Used to create GroupHeaders with non-capitalized caption.\n\t\t * These headers are inserted into the master list to\n\t\t * group the master lis+
t's items.\n\t\t * @param {Object} oGroup group whose text is to be displayed\n\t\t * @public\n\t\t * @returns {sap.m.GroupHeaderListItem} group header with non-capitalized caption.\n\t\t */\n\t\tcreateGroupHeader: function(oGroup) {\n\t\t\treturn new Gr+
oupHeaderListItem({\n\t\t\t\ttitle: oGroup.text,\n\t\t\t\tupperCase: false\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Navigates back in the browser history, if the entry was created by this app.\n\t\t * If not, it navigates to the Fiori Launchpad home page\n\+
t\t * @override\n\t\t * @public\n\t\t */\n\t\tonNavBack: function() {\n\t\t\tvar oHistory = sap.ui.core.routing.History.getInstance(),\n\t\t\t\tsPreviousHash = oHistory.getPreviousHash(),\n\t\t\t\toCrossAppNavigator = sap.ushell.Container.getService(\"Cr+
ossApplicationNavigation\");\n\n\t\t\tif (sPreviousHash !== undefined) {\n\t\t\t\t// The history contains a previous entry\n\t\t\t\thistory.go(-1);\n\t\t\t} else {\n\t\t\t\t// Navigate back to FLP home\n\t\t\t\toCrossAppNavigator.toExternal({\n\t\t\t\t\t+
target: {\n\t\t\t\t\t\tshellHash: \"#Shell-home\"\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Event handler  (attached declaratively) called when the add button in the master view is pressed. it opens the create view.\n\t\t * @public\n\+
t\t */\n\t\tonAdd: function() {\n\t\t\tthis.getModel(\"appView\").setProperty(\"/addEnabled\", false);\n\t\t\tthis.getRouter().getTargets().display(\"create\");\n\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* be+
gin: internal methods                                     */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Creates the model for the view\n\t\t * @private\n\t\t */\n\t\t_createViewModel: function() {\n\t\t\tret+
urn new JSONModel({\n\t\t\t\tisFilterBarVisible: false,\n\t\t\t\tfilterBarLabel: \"\",\n\t\t\t\tdelay: 0,\n\t\t\t\ttitle: this.getResourceBundle().getText(\"masterTitleCount\", [0]),\n\t\t\t\tnoDataText: this.getResourceBundle().getText(\"masterListNoDat+
aText\"),\n\t\t\t\tsortBy: \"department_name\",\n\t\t\t\tgroupBy: \"None\"\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Ask for user confirmation to leave the edit page and discard all changes\n\t\t * @param {object} fnLeave - handles discard changes\n\t\t * @p+
aram {object} fnLeaveCancelled - handles cancel\n\t\t * @private\n\t\t */\n\t\t_leaveEditPage: function(fnLeave, fnLeaveCancelled) {\n\t\t\tvar sQuestion = this.getResourceBundle().getText(\"warningConfirm\");\n\t\t\tvar sTitle = this.getResourceBundle()+
.getText(\"warning\");\n\n\t\t\tMessageBox.show(sQuestion, {\n\t\t\t\ticon: MessageBox.Icon.WARNING,\n\t\t\t\ttitle: sTitle,\n\t\t\t\tactions: [MessageBox.Action.OK, MessageBox.Action.CANCEL],\n\t\t\t\tonClose: function(oAction) {\n\t\t\t\t\tif (oAction +
=== MessageBox.Action.OK) {\n\t\t\t\t\t\tfnLeave();\n\t\t\t\t\t} else if (fnLeaveCancelled) {\n\t\t\t\t\t\tfnLeaveCancelled();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * If the master route was hit (empty hash) we have to set\n\t\t * t+
he hash to to the first item in the list as soon as the\n\t\t * listLoading is done and the first item in the list is known\n\t\t * @private\n\t\t */\n\t\t_onMasterMatched: function() {\n\t\t\tthis._oListSelector.oWhenListLoadingIsDone.then(\n\t\t\t\tfun+
ction(mParams) {\n\t\t\t\t\tif (mParams.list.getMode() === \"None\") {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.getModel(\"appView\").setProperty(\"/addEnabled\", true);\n\t\t\t\t\tif (!mParams.list.getSelectedItem()) {\n\t\t\t\t\t\tthis.getRout+
er().navTo(\"object\", {\n\t\t\t\t\t\t\tdepartment_id: encodeURIComponent(mParams.firstListitem.getBindingContext().getProperty(\"department_id\"))\n\t\t\t\t\t\t}, true);\n\t\t\t\t\t}\n\t\t\t\t}.bind(this),\n\t\t\t\tfunction(mParams) {\n\t\t\t\t\tif (mPa+
rams.error) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.getRouter().getTargets().display(\"detailNoObjectsAvailable\");\n\t\t\t\t}.bind(this)\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Shows the selected item on the detail page\n\t\t * On phones a addi+
tional history entry is created\n\t\t * @param {sap.m.ObjectListItem} oItem selected Item\n\t\t * @private\n\t\t */\n\t\t_showDetail: function(oItem) {\n\t\t\tvar bReplace = !Device.system.phone;\n\t\t\tthis.getRouter().navTo(\"object\", {\n\t\t\t\tdepar+
tment_id: encodeURIComponent(oItem.getBindingContext().getProperty(\"department_id\"))\n\t\t\t}, bReplace);\n\t\t},\n\n\t\t/**\n\t\t * Sets the item count on the master list header\n\t\t * @param {integer} iTotalItems the total number of items in the lis+
t\n\t\t * @private\n\t\t */\n\t\t_updateListItemCount: function(iTotalItems) {\n\t\t\tvar sTitle;\n\t\t\t// only update the counter if the length is final\n\t\t\tif (this._oList.getBinding(\"items\").isLengthFinal()) {\n\t\t\t\tsTitle = this.getResourceB+
undle().getText(\"masterTitleCount\", [iTotalItems]);\n\t\t\t\tthis.getModel(\"masterView\").setProperty(\"/title\", sTitle);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Internal helper method to apply both filter and search state together on the list binding\n\+
t\t * @private\n\t\t */\n\t\t_applyFilterSearch: function() {\n\t\t\tvar aFilters = this._oListFilterState.aSearch.concat(this._oListFilterState.aFilter),\n\t\t\t\toViewModel = this.getModel(\"masterView\");\n\t\t\tthis._oList.getBinding(\"items\").filte+
r(aFilters, \"Application\");\n\t\t\t// changes the noDataText of the list in case there are no filter results\n\t\t\tif (aFilters.length !== 0) {\n\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataWithFil+
terOrSearchText\"));\n\t\t\t} else if (this._oListFilterState.aSearch.length > 0) {\n\t\t\t\t// only reset the no data text to default when no new search was triggered\n\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"ma+
sterListNoDataText\"));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Internal helper method to apply both group and sort state together on the list binding\n\t\t * @private\n\t\t */\n\t\t_applyGroupSort: function(aSorters) {\n\t\t\tthis._oList.getBinding(\"items\+
").sort(aSorters);\n\t\t},\n\n\t\t/**\n\t\t * Internal helper method that sets the filter bar visibility property and the label's caption to be shown\n\t\t * @param {string} sFilterBarText the selected filter value\n\t\t * @private\n\t\t */\n\t\t_updateF+
ilterBar: function(sFilterBarText) {\n\t\t\tvar oViewModel = this.getModel(\"masterView\");\n\t\t\toViewModel.setProperty(\"/isFilterBarVisible\", (this._oListFilterState.aFilter.length > 0));\n\t\t\toViewModel.setProperty(\"/filterBarLabel\", this.getRe+
sourceBundle().getText(\"masterFilterBarText\", [sFilterBarText]));\n\t\t},\n\n\t\t/**\n\t\t * Internal helper method that adds \"/\" to the item's path \n\t\t * @private\n\t\t */\n\t\t_fnGetPathWithSlash: function(sPath) {\n\t\t\treturn (sPath.indexOf(\+
"/\") === 0 ? \"\" : \"/\") + sPath;\n\t\t},\n\n\t\t/**\n\t\t * It navigates to the saved itemToSelect item. After delete it navigate to the next item. \n\t\t * After add it navigates to the new added item if it is displayed in the tree. If not it naviga+
tes to the first item.\n\t\t * @private\n\t\t */\n\t\t_findItem: function() {\n\t\t\tvar itemToSelect = this.getModel(\"appView\").getProperty(\"/itemToSelect\");\n\t\t\tif (itemToSelect) {\n\t\t\t\tvar sPath = this._fnGetPathWithSlash(itemToSelect);\n\t+
\t\t\tvar oItem = this._oListSelector.findListItem(sPath);\n\t\t\t\tif (!oItem) { //item is not viewable in the tree. not in the current tree page.\n\t\t\t\t\toItem = this._oListSelector.findFirstItem();\n\t\t\t\t\tif (oItem) {\n\t\t\t\t\t\tsPath = oItem+
.getBindingContext().getPath();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.getRouter().getTargets().display(\"detailNoObjectsAvailable\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._oListSelector.selectAListItem(sPath);\n\t\t\t\tthis._showDet+
ail(oItem);\n\t\t\t}\n\t\t}\n\n\t});\n});",                                                                                                                                                                                                                    
		"masterclass/controller/App.controller.js": "sap.ui.define([\n\t\"masterclass/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\"\n], function(BaseController, JSONModel) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"masterclass.c+
ontroller.App\", {\n\n\t\tonInit: function() {\n\t\t\tvar oViewModel,\n\t\t\t\tfnSetAppNotBusy,\n\t\t\t\toListSelector = this.getOwnerComponent().oListSelector,\n\t\t\t\tiOriginalBusyDelay = this.getView().getBusyIndicatorDelay();\n\n\t\t\toViewModel = n+
ew JSONModel({\n\t\t\t\tbusy: true,\n\t\t\t\tdelay: 0,\n\t\t\t\titemToSelect: null,\n\t\t\t\taddEnabled: false\n\n\t\t\t});\n\t\t\tthis.setModel(oViewModel, \"appView\");\n\n\t\t\tfnSetAppNotBusy = function() {\n\t\t\t\toViewModel.setProperty(\"/busy\", +
false);\n\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\n\t\t\t};\n\n\t\t\tthis.getOwnerComponent().getModel().metadataLoaded()\n\t\t\t\t.then(fnSetAppNotBusy);\n\n\t\t\t// Makes sure that master view is hidden in split app\n\t\t\t// aft+
er a new list entry has been selected.\n\t\t\toListSelector.attachListSelectionChange(function() {\n\t\t\t\tthis.byId(\"idAppControl\").hideMaster();\n\t\t\t}, this);\n\n\t\t\t// apply content density mode to root view\n\t\t\tthis.getView().addStyleClass+
(this.getOwnerComponent().getContentDensityClass());\n\t\t}\n\t});\n\n});",                                                                                                                                                                                    
		"masterclass/controller/ListSelector.js": "sap.ui.define([\n\t\"sap/ui/base/Object\",\n\t\"sap/m/GroupHeaderListItem\"\n], function(BaseObject, GroupHeaderListItem) {\n\t\"use strict\";\n\n\treturn BaseObject.extend(\"masterclass.model.ListSelector\", +
{\n\n\t\t/**\n\t\t * Provides a convenience API for selecting list items. All the functions will wait until the initial load of the a List passed to the instance by the setBoundMasterList\n\t\t * function.\n\t\t * @class\n\t\t * @public\n\t\t * @alias ma+
sterclass.model.ListSelector\n\t\t */\n\n\t\tconstructor: function() {\n\t\t\tthis._oWhenListHasBeenSet = new Promise(function(fnResolveListHasBeenSet) {\n\t\t\t\tthis._fnResolveListHasBeenSet = fnResolveListHasBeenSet;\n\t\t\t}.bind(this));\n\t\t\t// Th+
is promise needs to be created in the constructor, since it is allowed to\n\t\t\t// invoke selectItem functions before calling setBoundMasterList\n\t\t\tthis.oWhenListLoadingIsDone = new Promise(function(fnResolve, fnReject) {\n\t\t\t\t// Used to wait un+
til the setBound masterList function is invoked\n\t\t\t\tthis._oWhenListHasBeenSet\n\t\t\t\t\t.then(function(oList) {\n\t\t\t\t\t\toList.getBinding(\"items\").attachEventOnce(\"dataReceived\",\n\t\t\t\t\t\t\tfunction(oData) {\n\t\t\t\t\t\t\t\tif (!oData.+
getParameter(\"data\")) {\n\t\t\t\t\t\t\t\t\tfnReject({\n\t\t\t\t\t\t\t\t\t\tlist: oList,\n\t\t\t\t\t\t\t\t\t\terror: true\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvar oFirstListItem = oList.getItems()[0];\n\t\t\t\t\t\t\t\tif (oFirstLis+
tItem) {\n\t\t\t\t\t\t\t\t\t// Have to make sure that first list Item is selected\n\t\t\t\t\t\t\t\t\t// and a select event is triggered. Like that, the corresponding\n\t\t\t\t\t\t\t\t\t// detail page is loaded automatically\n\t\t\t\t\t\t\t\t\tfnResolve({+
\n\t\t\t\t\t\t\t\t\t\tlist: oList,\n\t\t\t\t\t\t\t\t\t\tfirstListitem: oFirstListItem\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// No items in the list\n\t\t\t\t\t\t\t\t\tfnReject({\n\t\t\t\t\t\t\t\t\t\tlist: oList,\n\t\t\t\t\t\+
t\t\t\t\terror: false\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}.bind(this));\n\t\t},\n\n\t\t/**\n\t\t * A bound list should be passed in here. Should be done, before the list has received its initi+
al data from the server.\n\t\t * May only be invoked once per ListSelector instance.\n\t\t * @param {sap.m.List} oList The list all the select functions will be invoked on.\n\t\t * @public\n\t\t */\n\t\tsetBoundMasterList: function(oList) {\n\t\t\tthis._+
oList = oList;\n\t\t\tthis._fnResolveListHasBeenSet(oList);\n\t\t},\n\n\t\t/**\n\t\t * Tries to select and scroll to a list item with a matching binding context. If there are no items matching the binding context or the ListMode is none,\n\t\t * no selec+
tion/scrolling will happen\n\t\t * @param {string} sBindingPath the binding path matching the binding path of a list item\n\t\t * @public\n\t\t */\n\t\tselectAListItem: function(sBindingPath) {\n\n\t\t\tthis.oWhenListLoadingIsDone.then(\n\t\t\t\tfunction+
() {\n\t\t\t\t\tvar oList = this._oList,\n\t\t\t\t\t\toSelectedItem;\n\n\t\t\t\t\tif (oList.getMode() === \"None\") {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\toSelectedItem = oList.getSelectedItem();\n\n\t\t\t\t\t// skip update if the current selec+
tion is already matching the object path\n\t\t\t\t\tif (oSelectedItem && oSelectedItem.getBindingContext().getPath() === sBindingPath) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\toList.getItems().some(function(oItem) {\n\t\t\t\t\t\tif (oItem.getBind+
ingContext() && oItem.getBindingContext().getPath() === sBindingPath) {\n\t\t\t\t\t\t\toList.setSelectedItem(oItem);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}.bind(this),\n\t\t\t\tfunction() {\n\t\t\t\t\tjQuery.sap.log.warning(+
\"Could not select the list item with the path\" + sBindingPath +\n\t\t\t\t\t\t\" because the list encountered an error or had no items\");\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* Conv+
enience Functions for List Selection Change Event       */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Attaches a listener and listener function to the ListSelector's bound master list. By using\n\t\t * a pro+
mise, the listener is added, even if the list is not available when 'attachListSelectionChange'\n\t\t * is called.\n\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\n\t\t * @param {function} oLi+
stener the listener object\n\t\t * @return {masterclass.model.ListSelector} the list selector object for method chaining\n\t\t * @public\n\t\t */\n\t\tattachListSelectionChange: function(fnFunction, oListener) {\n\t\t\tthis._oWhenListHasBeenSet.then(func+
tion() {\n\t\t\t\tthis._oList.attachSelectionChange(fnFunction, oListener);\n\t\t\t}.bind(this));\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Detaches a listener and listener function from the ListSelector's bound master list. By using\n\t\t * a promi+
se, the listener is removed, even if the list is not available when 'detachListSelectionChange'\n\t\t * is called.\n\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\n\t\t * @param {function} oLi+
stener the listener object\n\t\t * @return {masterclass.model.ListSelector} the list selector object for method chaining\n\t\t * @public\n\t\t */\n\t\tdetachListSelectionChange: function(fnFunction, oListener) {\n\t\t\tthis._oWhenListHasBeenSet.then(func+
tion() {\n\t\t\t\tthis._oList.detachSelectionChange(fnFunction, oListener);\n\t\t\t}.bind(this));\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Removes all selections from master list.\n\t\t * Does not trigger 'selectionChange' event on master list, tho+
ugh.\n\t\t * @public\n\t\t */\n\t\tclearMasterListSelection: function() {\n\t\t\t//use promise to make sure that 'this._oList' is available\n\t\t\tthis._oWhenListHasBeenSet.then(function() {\n\t\t\t\tthis._oList.removeSelections(true);\n\t\t\t}.bind(this+
));\n\t\t},\n\n\t\t/**\n\t\t * Find the next valid list item from the master list after the current.\n\t\t * @return {sap.m.ListItem} the list selector object for method chaining\n\t\t * @public\n\t\t */\n\t\tfindNextItem: function(sCurrentPath) {\n\t\t\+
tvar aItems = this._oList.getItems();\n\t\t\tvar iItemsCount = aItems.length;\n\t\t\tif (iItemsCount === 1) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (iItemsCount > 0) {\n\t\t\t\tvar bFound = false;\n\t\t\t\tfor (var i = 0; i < iItemsCount; i++) {\n\t\t+
\t\t\tvar oItem = aItems[i];\n\t\t\t\t\tif (!(oItem instanceof GroupHeaderListItem)) {\n\t\t\t\t\t\tvar oCtx = oItem.getBindingContext(),\n\t\t\t\t\t\t\tsPath = oCtx.getPath();\n\t\t\t\t\t\tbFound = sPath === sCurrentPath;\n\t\t\t\t\t\tif (bFound) {\n\t\+
t\t\t\t\t\tif (i === iItemsCount - 1) { //the current item is the last but not the only one\n\t\t\t\t\t\t\t\treturn aItems[0];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn aItems[i + 1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\+
tif (!bFound) {\n\t\t\t\t\treturn null; //not valid\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Find the list item from a path.\n\t\t * @return {sap.m.ListItem} the list selector object for method chaining\n\t\t * @public\n\t\t */\n\t\tfindListItem: fun+
ction(sPath) {\n\t\t\tvar aItems = this._oList.getItems();\n\t\t\tfor (var i = 0; i < aItems.length; i++) {\n\t\t\t\tvar oItem = aItems[i];\n\t\t\t\tif (!(oItem instanceof GroupHeaderListItem)) {\n\t\t\t\t\tvar oCtx = oItem.getBindingContext();\n\t\t\t\t+
\tvar bFound = sPath === oCtx.getPath();\n\t\t\t\t\tif (bFound) {\n\t\t\t\t\t\treturn oItem;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null; //not found\n\t\t},\n\t\t/**\n\t\t * Find the first list item\n\t\t * @return {sap.m.ListItem} the list sele+
ctor object for method chaining\n\t\t * @public\n\t\t */\n\t\tfindFirstItem: function() {\n\t\t\tvar aItems = this._oList.getItems();\n\t\t\tif (aItems && aItems.length > 0) {\n\t\t\t\treturn aItems[0];\n\t\t\t}\n\t\t\treturn null; //not found\n\t\t}\n\t+
});\n\n});",                                                                                                                                                                                                                                                   
		"masterclass/view/DetailNoObjectsAvailable.view.xml": "<mvc:View controllerName=\"masterclass.controller.BaseController\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n\t<MessagePage id=\"page\" title=\"{i18n>notAvailableViewTitle}\" text=\"{i18n>noO+
bjectsAvailableText}\" icon=\"{sap-icon://product}\" description=\"\"\n\t\tshowNavButton=\"{device>/system/phone}\" navButtonPress=\"onNavBack\"></MessagePage>\n</mvc:View>",                                                                                 
		"masterclass/view/ViewSettingsDialog.fragment.xml": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\">\n\t<ViewSettingsDialog id=\"viewSettingsDialog\" confirm=\"onConfirmViewSettingsDialog\" resetFilters=\"onViewSettingsDialogResetF+
ilters\">\n\t\t<filterItems>\n\t\t\t<ViewSettingsFilterItem id=\"filterItems\" text=\"{i18n>masterFilterName}\" key=\"Price\" multiSelect=\"false\">\n\t\t\t\t<items>\n\t\t\t\t\t<ViewSettingsItem text=\"{i18n>masterFilter1}\" key=\"Filter1\" id=\"viewFilt+
er1\"/>\n\t\t\t\t\t<ViewSettingsItem text=\"{i18n>masterFilter2}\" key=\"Filter2\" id=\"viewFilter2\"/>\n\t\t\t\t</items>\n\t\t\t</ViewSettingsFilterItem>\n\t\t</filterItems>\n\t</ViewSettingsDialog>\n</core:FragmentDefinition>",                          
		"masterclass/view/CreateEntity.view.xml": "<mvc:View controllerName=\"masterclass.controller.CreateEntity\" xmlns:core=\"sap.ui.core\" xmlns:f=\"sap.ui.layout.form\"\n\txmlns:footerbar=\"sap.ushell.ui.footerbar\" xmlns:l=\"sap.ui.layout\" xmlns:mvc=\"s+
ap.ui.core.mvc\" xmlns:semantic=\"sap.m.semantic\"\n\txmlns:smart=\"sap.ui.comp.smartfield\" xmlns=\"sap.m\">\n\t<semantic:DetailPage id=\"page\" navButtonPress=\"onNavBack\" title=\"{viewModel>/viewTitle}\" busy=\"{viewModel>/busy}\">\n\t\t<semantic:con+
tent>\n\t\t\t<f:SimpleForm class=\"editableForm\" columnsL=\"1\" columnsM=\"1\" editable=\"true\" emptySpanL=\"4\" emptySpanM=\"4\" id=\"newEntitySimpleForm\"\n\t\t\t\tlabelSpanL=\"3\" labelSpanM=\"3\" layout=\"ResponsiveGridLayout\" maxContainerCols=\"2+
\" minWidth=\"1024\"\n\t\t\t\ttitle=\"{= ${viewModel>/mode} === 'edit'? 'Edit department': 'New department'}\">\n\t\t\t\t<f:content>\n\t\t\t\t\t<Label text=\"Department ID\" required=\"true\"/>\n\t\t\t\t\t<Input name=\"department_id\" id=\"department_id_+
id\" valueLiveUpdate=\"true\" liveChange=\"_validateSaveEnablement\"\n\t\t\t\t\t\tenabled=\"{= ${viewModel>/mode} === 'edit'? false: true}\" visible=\"true\"\n\t\t\t\t\t\tvalue=\"{ path: 'department_id', type: 'sap.ui.model.odata.type.String' , constrain+
ts:{ maxLength:10, nullable:false } }\"/>\n\t\t\t\t\t<Label text=\"Name\" required=\"false\"/>\n\t\t\t\t\t<Input name=\"department_name\" id=\"department_name_id\" valueLiveUpdate=\"true\" liveChange=\"_validateSaveEnablement\" enabled=\"true\"\n\t\t\t\t+
\t\tvisible=\"true\" value=\"{ path: 'department_name', type: 'sap.ui.model.odata.type.String' , constraints:{ maxLength:60 } }\"/>\n\t\t\t\t\t<Label text=\"Leader\" required=\"false\"/>\n\t\t\t\t\t<Input name=\"department_leader\" id=\"department_leader+
_id\" valueLiveUpdate=\"true\" liveChange=\"_validateSaveEnablement\" enabled=\"true\"\n\t\t\t\t\t\tvisible=\"true\" value=\"{ path: 'department_leader', type: 'sap.ui.model.odata.type.String' , constraints:{ maxLength:60 } }\"/>\n\t\t\t\t\t<Label text=\+
"Address\" required=\"false\"/>\n\t\t\t\t\t<Input name=\"department_address\" id=\"department_address_id\" valueLiveUpdate=\"true\" liveChange=\"_validateSaveEnablement\" enabled=\"true\"\n\t\t\t\t\t\tvisible=\"true\" value=\"{ path: 'department_address'+
, type: 'sap.ui.model.odata.type.String' , constraints:{ maxLength:60 } }\"/>\n\t\t\t\t\t<Label text=\"Room number\" required=\"false\"/>\n\t\t\t\t\t<Input name=\"department_room\" id=\"department_room_id\" valueLiveUpdate=\"true\" liveChange=\"_validate+
SaveEnablement\" enabled=\"true\"\n\t\t\t\t\t\tvisible=\"true\" value=\"{ path: 'department_room', type: 'sap.ui.model.odata.type.String' , constraints:{ maxLength:10 } }\"/>\n\t\t\t\t</f:content>\n\t\t\t</f:SimpleForm>\n\t\t</semantic:content>\n\t\t<sem+
antic:saveAction>\n\t\t\t<semantic:SaveAction id=\"save\" enabled=\"{viewModel>/enableCreate}\" press=\"onSave\"/>\n\t\t</semantic:saveAction>\n\t\t<semantic:cancelAction>\n\t\t\t<semantic:CancelAction id=\"cancel\" press=\"onCancel\"></semantic:CancelAc+
tion>\n\t\t</semantic:cancelAction>\n\t</semantic:DetailPage>\n</mvc:View>",                                                                                                                                                                                   
		"masterclass/view/Master.view.xml": "<mvc:View controllerName=\"masterclass.controller.Master\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns:core=\"sap.ui.core\" xmlns=\"sap.m\"\n\txmlns:semantic=\"sap.m.semantic\">\n\t<semantic:MasterPage id=\"page\" title=\"{+
masterView>/title}\" navButtonPress=\"onNavBack\" showNavButton=\"true\">\n\t\t<semantic:subHeader>\n\t\t\t<Bar id=\"headerBar\">\n\t\t\t\t<contentMiddle>\n\t\t\t\t\t<SearchField id=\"searchField\" showRefreshButton=\"{= !${device>/support/touch} }\" too+
ltip=\"{i18n>masterSearchTooltip}\" width=\"100%\"\n\t\t\t\t\t\tsearch=\"onSearch\"></SearchField>\n\t\t\t\t</contentMiddle>\n\t\t\t</Bar>\n\t\t</semantic:subHeader>\n\t\t<semantic:content>\n\t\t\t<PullToRefresh id=\"pullToRefresh\" visible=\"{device>/su+
pport/touch}\" refresh=\"onRefresh\"/>\n\t\t\t<!-- For client side filtering add this to the items attribute:  parameters: {operationMode: 'Client'}}\" -->\n\t\t\t<List id=\"list\"\n\t\t\t\titems=\"{ path: '/ZDEPARTMENTS_CDS', sorter: { path: 'department+
_name', descending: false }, groupHeaderFactory: '.createGroupHeader' }\"\n\t\t\t\tbusyIndicatorDelay=\"{masterView>/delay}\" noDataText=\"{masterView>/noDataText}\"\n\t\t\t\tmode=\"{= ${device>/system/phone} ? 'None' : 'SingleSelectMaster'}\" growing=\"+
true\" growingScrollToLoad=\"true\"\n\t\t\t\tupdateFinished=\"onUpdateFinished\" selectionChange=\"onSelectionChange\">\n\t\t\t\t<infoToolbar>\n\t\t\t\t\t<Toolbar active=\"true\" id=\"filterBar\" visible=\"{masterView>/isFilterBarVisible}\" press=\"onOpe+
nViewSettings\">\n\t\t\t\t\t\t<Title id=\"filterBarLabel\" text=\"{masterView>/filterBarLabel}\"/>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</infoToolbar>\n\t\t\t\t<items>\n\t\t\t\t\t<ObjectListItem type=\"{= ${device>/system/phone} ? 'Active' : 'Inactive'}\" pres+
s=\"onSelectionChange\" title=\"{department_name}\"\n\t\t\t\t\t\tnumberUnit=\"{department_address}\"></ObjectListItem>\n\t\t\t\t</items>\n\t\t\t</List>\n\t\t</semantic:content>\n\t\t<semantic:addAction>\n\t\t\t<semantic:AddAction id=\"addButton\" enabled+
=\"{appView>/addEnabled}\" press=\"onAdd\"/>\n\t\t</semantic:addAction>\n\t</semantic:MasterPage>\n</mvc:View>",                                                                                                                                               
		"masterclass/view/Detail.view.xml": "<mvc:View controllerName=\"masterclass.controller.Detail\" xmlns=\"sap.m\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns:semantic=\"sap.m.semantic\"\n\txmlns:f=\"sap.ui.layout.form\" xmlns:footerbar=\"sap.ushell.ui.footerbar\+
">\n\t<semantic:DetailPage id=\"page\" navButtonPress=\"onNavBack\" showNavButton=\"{device>/system/phone}\" title=\"{i18n>detailTitle}\"\n\t\tbusy=\"{detailView>/busy}\" busyIndicatorDelay=\"{detailView>/delay}\">\n\t\t<semantic:content>\n\t\t\t<ObjectH+
eader id=\"objectHeader\" title=\"{department_name}\" numberUnit=\"{department_address}\"></ObjectHeader>\n\t\t\t<!--<IconTabBar id=\"iconTabBar\" class=\"sapUiResponsiveContentPadding\">\n\t\t\t\t<items>\n\t\t\t\t\t<IconTabFilter id=\"iconTabBarFilter1\+
" icon=\"sap-icon://hint\" tooltip=\"{i18n>detailIconTabBarInfo}\"></IconTabFilter>\n\t\t\t\t\t<IconTabFilter id=\"iconTabBarFilter2\" icon=\"sap-icon://attachment\" tooltip=\"{i18n>detailIconTabBarAttachments}\"></IconTabFilter>\n\t\t\t\t</items>\n\t\t\+
t</IconTabBar>-->\n\t\t\t<f:SimpleForm id=\"attributesSimpleForm\"\n    \t\t\t    title=\"Detailed View\" layout=\"ResponsiveGridLayout\"\n    \t\t\t    minWidth=\"1024\" maxContainerCols=\"2\" class=\"sapUiForceWidthAuto sapUiResponsiveMargin\"\n    \t\+
t\t    labelSpanL=\"3\" labelSpanM=\"3\" emptySpanL=\"5\" emptySpanM=\"5\" columnsL=\"1\" columnsM=\"1\">\n\t\t\t\t<Label id=\"lblID\" text=\"ID\"/>\n    \t\t\t<Text id=\"txtID\" text=\"{department_id}\" />\n    \t\t\t<Label id=\"lblName\" text=\"Name\"/+
>\n    \t\t\t<Text id=\"txtName\" text=\"{department_name}\" />\n    \t\t\t<Label id=\"lblLeader\" text=\"Leader\"/>\n    \t\t\t<Text id=\"txtLeader\" text=\"{department_leader}\" />\n    \t\t\t<Label id=\"lblAddress\" text=\"Address\"/>\n    \t\t\t<Text+
 id=\"txtAddress\" text=\"{department_address}\" />\n    \t\t\t<Label id=\"lblRoom\" text=\"Room\"/>\n    \t\t\t<Text id=\"txtRoom\" text=\"{department_room}\" />\n\t\t\t</f:SimpleForm>\n\t\t</semantic:content>\n\t\t<semantic:editAction>\n\t\t\t<semantic+
:EditAction id=\"edit\" press=\"onEdit\"/>\n\t\t</semantic:editAction>\n\t\t<semantic:customFooterContent>\n\t\t\t<Button enabled=\"true\" id=\"deleteButton\" press=\"onDelete\" text=\"Delete\"/>\n\t\t</semantic:customFooterContent>\n\t\t<semantic:sendEm+
ailAction>\n\t\t\t<semantic:SendEmailAction id=\"shareEmail\" press=\"onShareEmailPress\"/>\n\t\t</semantic:sendEmailAction>\n\t\t<semantic:shareInJamAction>\n\t\t\t<semantic:ShareInJamAction id=\"shareInJam\" visible=\"{FLP>/isShareInJamActive}\" press=+
\"onShareInJamPress\"/>\n\t\t</semantic:shareInJamAction>\n\t\t<semantic:saveAsTileAction>\n\t\t\t<footerbar:AddBookmarkButton id=\"shareTile\" title=\"{detailView>/saveAsTileTitle}\"/>\n\t\t</semantic:saveAsTileAction>\n\t</semantic:DetailPage>\n</mvc:V+
iew>",                                                                                                                                                                                                                                                         
		"masterclass/view/App.view.xml": "<mvc:View controllerName=\"masterclass.controller.App\" xmlns:mvc=\"sap.ui.core.mvc\" displayBlock=\"true\" busy=\"{appView>/busy}\"\n\tbusyIndicatorDelay=\"{appView>/delay}\" xmlns=\"sap.m\">\n\t<SplitApp id=\"idAppCo+
ntrol\"/>\n</mvc:View>",                                                                                                                                                                                                                                       
		"masterclass/view/DetailObjectNotFound.view.xml": "<mvc:View controllerName=\"masterclass.controller.BaseController\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n\t<MessagePage id=\"page\" title=\"{i18n>detailTitle}\" text=\"{i18n>noObjectFoundText+
}\" icon=\"{sap-icon://product}\" description=\"\"\n\t\tshowNavButton=\"{device>/system/phone}\" navButtonPress=\"onNavBack\"></MessagePage>\n</mvc:View>",                                                                                                    
		"masterclass/model/models.js": "sap.ui.define([\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/Device\"\n], function(JSONModel, Device) {\n\t\"use strict\";\n\n\treturn {\n\t\tcreateDeviceModel: function() {\n\t\t\tvar oModel = new JSONModel(Device);\+
n\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\treturn oModel;\n\t\t},\n\n\t\tcreateFLPModel: function() {\n\t\t\tvar fnGetuser = jQuery.sap.getObject(\"sap.ushell.Container.getUser\"),\n\t\t\t\tbIsShareInJamActive = fnGetuser ? fnGetuser().isJam+
Active() : false,\n\t\t\t\toModel = new JSONModel({\n\t\t\t\t\tisShareInJamActive: bIsShareInJamActive\n\t\t\t\t});\n\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\treturn oModel;\n\t\t}\n\t};\n\n});",                                               
		"masterclass/model/formatter.js": "sap.ui.define([], function() {\n\t\"use strict\";\n\n\treturn {\n\t\t/**\n\t\t * Rounds the currency value to 2 digits\n\t\t *\n\t\t * @public\n\t\t * @param {string} sValue value to be formatted\n\t\t * @returns {str+
ing} formatted currency value with 2 digits\n\t\t */\n\t\tcurrencyValue: function(sValue) {\n\t\t\tif (!sValue) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\n\t\t\treturn parseFloat(sValue).toFixed(2);\n\t\t}\n\t};\n\n});",                                          
		"masterclass/model/GroupSortState.js": "sap.ui.define([\n\t\"sap/ui/base/Object\",\n\t\"sap/ui/model/Sorter\"\n], function(BaseObject, Sorter) {\n\t\"use strict\";\n\n\treturn BaseObject.extend(\"masterclass.model.GroupSortState\", {\n\n\t\t/**\n\t\t *+
 Creates sorters and groupers for the master list.\n\t\t * Since grouping also means sorting, this class modifies the viewmodel.\n\t\t * If a user groups by a field, and there is a corresponding sort option, the option will be chosen.\n\t\t * If a user u+
ngroups, the sorting will be reset to the default sorting.\n\t\t * @class\n\t\t * @public\n\t\t * @alias masterclass.model.GroupSortState\n\t\t */\n\t\tconstructor: function(oViewModel, fnGroupFunction) {\n\t\t\tthis._oViewModel = oViewModel;\n\t\t\tthis+
._fnGroupFunction = fnGroupFunction;\n\t\t},\n\n\t\t/**\n\t\t * Sorts by department_name, or by \n\t\t *\n\t\t * @param sKey - the key of the field used for grouping\n\t\t * @returns {sap.ui.model.Sorter[]} an array of sorters\n\t\t */\n\t\tsort: functio+
n(sKey) {\n\t\t\tvar sGroupedBy = this._oViewModel.getProperty(\"/groupBy\");\n\n\t\t\tif (sGroupedBy !== \"None\") {\n\t\t\t\t// If the list is grouped, remove the grouping since the user wants to sort by something different\n\t\t\t\t// Grouping only wo+
rks if the list is primary sorted by the grouping - the first sorten contains a grouper function\n\t\t\t\tthis._oViewModel.setProperty(\"/groupBy\", \"None\");\n\t\t\t}\n\n\t\t\treturn [new Sorter(sKey, false)];\n\t\t},\n\n\t\t/**\n\t\t * Groups by , or +
resets the grouping for the key \"None\"\n\t\t *\n\t\t * @param sKey - the key of the field used for grouping\n\t\t * @returns {sap.ui.model.Sorter[]} an array of sorters\n\t\t */\n\t\tgroup: function(sKey) {\n\t\t\tvar aSorters = [];\n\n\t\t\tif (sKey =+
== \"\") {\n\t\t\t\t// Grouping means sorting so we set the select to the same Entity used for grouping\n\t\t\t\tthis._oViewModel.setProperty(\"/sortBy\", \"\");\n\n\t\t\t\taSorters.push(\n\t\t\t\t\tnew Sorter(\"\", false,\n\t\t\t\t\t\tthis._fnGroupFunct+
ion.bind(this))\n\t\t\t\t);\n\t\t\t} else if (sKey === \"None\") {\n\t\t\t\t// select the default sorting again\n\t\t\t\tthis._oViewModel.setProperty(\"/sortBy\", \"department_name\");\n\t\t\t}\n\n\t\t\treturn aSorters;\n\t\t}\n\n\t});\n});",             
		"masterclass/model/ZInputChecker.js": "sap.ui.define([\n\t\"sap/ui/base/Object\"\n\t], function(BaseObject) {\n\t\"use strict\";\n\n\treturn BaseObject.extend(\"masterclass.model.ZInputChecker\", {\n\t\t\n\t\tconstructor: function() {\n\t\t\tthis.depar+
tment_address = \"\";\n\t\t\tthis.department_room = \"\";\n\t\t\tthis._reset_errors();\n\t\t},\n\t\t\n\t\tset_department_address: function(department_address) {\n\t\t\tthis.department_address = department_address;\n\t\t},\n\t\t\n\t\tset_department_room: +
function(department_room) {\n\t\t\tthis.department_room = department_room;\n\t\t},\n\t\t\n\t\tcheck_input: function() {\n\t\t\tif(this.department_room && !this.department_address)\n\t\t\t{\n\t\t\t\tthis.department_room_state = \"Error\";\n\t\t\t\tthis.de+
partment_room_state_text = \"Если не заполнен адрес, то номер комнаты должен быть пустым\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._reset_errors();\n\t\t\t}\n\t\t},\n\t\t\n\t\tget_department_room_state: function() {\n\t\t\treturn this.department_room_state+
;\t\n\t\t},\n\t\t\n\t\tget_department_room_state_text: function() {\n\t\t\treturn this.department_room_state_text;\t\n\t\t},\n\t\t\n\t\tget_is_error: function() {\n\t\t\treturn (this.department_room_state === \"Error\");\n\t\t},\n\t\t\n\t\t_reset_errors:+
 function() {\n\t\t\tthis.department_room_state = \"None\";\n\t\t\tthis.department_room_state_text = \"\";\n\t\t}\n\t});\n\n});",                                                                                                                              
		"masterclass/localService/mockserver.js": "sap.ui.define([\n\t\"sap/ui/core/util/MockServer\"\n], function(MockServer) {\n\t\"use strict\";\n\n\tvar oMockServer,\n\t\t_sAppModulePath = \"masterclass/\",\n\t\t_sJsonFilesModulePath = _sAppModulePath + \"+
localService/mockdata\";\n\n\treturn {\n\t\t/**\n\t\t * Initializes the mock server.\n\t\t * You can configure the delay with the URL parameter \"serverDelay\".\n\t\t * The local mock data in this folder is returned instead of the real data for testing.\+
n\t\t * @public\n\t\t */\n\n\t\tinit: function() {\n\t\t\tvar oUriParameters = jQuery.sap.getUriParameters(),\n\t\t\t\tsJsonFilesUrl = jQuery.sap.getModulePath(_sJsonFilesModulePath),\n\t\t\t\tsManifestUrl = jQuery.sap.getModulePath(_sAppModulePath + \"m+
anifest\", \".json\"),\n\t\t\t\tsEntity = \"ZDEPARTMENTS_CDS\",\n\t\t\t\tsErrorParam = oUriParameters.get(\"errorType\"),\n\t\t\t\tiErrorCode = sErrorParam === \"badRequest\" ? 400 : 500,\n\t\t\t\toManifest = jQuery.sap.syncGetJSON(sManifestUrl).data,\n\+
t\t\t\toMainDataSource = oManifest[\"sap.app\"].dataSources.mainService,\n\t\t\t\tsMetadataUrl = jQuery.sap.getModulePath(_sAppModulePath + oMainDataSource.settings.localUri.replace(\".xml\", \"\"), \".xml\"),\n\t\t\t\t// ensure there is a trailing slash+
\n\t\t\t\tsMockServerUrl = /.*\\/$/.test(oMainDataSource.uri) ? oMainDataSource.uri : oMainDataSource.uri + \"/\";\n\n\t\t\toMockServer = new MockServer({\n\t\t\t\trootUri: sMockServerUrl\n\t\t\t});\n\n\t\t\t// configure mock server with a delay of 1s\n\+
t\t\tMockServer.config({\n\t\t\t\tautoRespond: true,\n\t\t\t\tautoRespondAfter: (oUriParameters.get(\"serverDelay\") || 1000)\n\t\t\t});\n\n\t\t\toMockServer.simulate(sMetadataUrl, {\n\t\t\t\tsMockdataBaseUrl: sJsonFilesUrl,\n\t\t\t\tbGenerateMissingMock+
Data: true\n\t\t\t});\n\n\t\t\tvar aRequests = oMockServer.getRequests(),\n\t\t\t\tfnResponse = function(iErrCode, sMessage, aRequest) {\n\t\t\t\t\taRequest.response = function(oXhr) {\n\t\t\t\t\t\toXhr.respond(iErrCode, {\n\t\t\t\t\t\t\t\"Content-Type\"+
: \"text/plain;charset=utf-8\"\n\t\t\t\t\t\t}, sMessage);\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t// handling the metadata error test\n\t\t\tif (oUriParameters.get(\"metadataError\")) {\n\t\t\t\taRequests.forEach(function(aEntry) {\n\t\t\t\t\tif (aEntry.path.+
toString().indexOf(\"$metadata\") > -1) {\n\t\t\t\t\t\tfnResponse(500, \"metadata Error\", aEntry);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Handling request errors\n\t\t\tif (sErrorParam) {\n\t\t\t\taRequests.forEach(function(aEntry) {\n\t\t\t\t\t+
if (aEntry.path.toString().indexOf(sEntity) > -1) {\n\t\t\t\t\t\tfnResponse(iErrorCode, sErrorParam, aEntry);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\toMockServer.start();\n\n\t\t\tjQuery.sap.log.info(\"Running the app with mock data\");\n\t\t},\n\n\t\t+
/**\n\t\t * @public returns the mockserver of the app, should be used in integration tests\n\t\t * @returns {sap.ui.core.util.MockServer} the mockserver instance\n\t\t */\n\t\tgetMockServer: function() {\n\t\t\treturn oMockServer;\n\t\t}\n\t};\n\n});",   
		"masterclass/controller/Detail.controller.js": "/*global location */\nsap.ui.define([\n\t\"masterclass/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"masterclass/model/formatter\",\n\t\"sap/m/MessageBox\",\n\t\"sap/m/MessageToast+
\"\n], function(BaseController, JSONModel, formatter, MessageBox, MessageToast) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"masterclass.controller.Detail\", {\n\n\t\tformatter: formatter,\n\n\t\t/* ===========================================+
================ */\n\t\t/* lifecycle methods                                           */\n\t\t/* =========================================================== */\n\n\t\tonInit: function() {\n\t\t\t// Model used to manipulate control states. The chosen va+
lues make sure,\n\t\t\t// detail page is busy indication immediately so there is no break in\n\t\t\t// between the busy indication for loading the view's meta data\n\t\t\tvar oViewModel = new JSONModel({\n\t\t\t\tbusy: false,\n\t\t\t\tdelay: 0\n\t\t\t});+
\n\n\t\t\tthis.getRouter().getRoute(\"object\").attachPatternMatched(this._onObjectMatched, this);\n\t\t\tthis.setModel(oViewModel, \"detailView\");\n\t\t\tthis.getOwnerComponent().getModel().metadataLoaded().then(this._onMetadataLoaded.bind(this));\n\t\+
t\tthis._oODataModel = this.getOwnerComponent().getModel();\n\t\t\tthis._oResourceBundle = this.getResourceBundle();\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* event handlers                                  +
            */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Event handler when the share by E-Mail button has been clicked\n\t\t * @public\n\t\t */\n\t\tonShareEmailPress: function() {\n\t\t\tvar oViewModel = +
this.getModel(\"detailView\");\n\n\t\t\tsap.m.URLHelper.triggerEmail(\n\t\t\t\tnull,\n\t\t\t\toViewModel.getProperty(\"/shareSendEmailSubject\"),\n\t\t\t\toViewModel.getProperty(\"/shareSendEmailMessage\")\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Event handl+
er when the share in JAM button has been clicked\n\t\t * @public\n\t\t */\n\t\tonShareInJamPress: function() {\n\t\t\tvar oViewModel = this.getModel(\"detailView\"),\n\t\t\t\toShareDialog = sap.ui.getCore().createComponent({\n\t\t\t\t\tname: \"sap.collab+
oration.components.fiori.sharing.dialog\",\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\tobject: {\n\t\t\t\t\t\t\tid: location.href,\n\t\t\t\t\t\t\tshare: oViewModel.getProperty(\"/shareOnJamTitle\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\toShareDialog.o+
pen();\n\t\t},\n\n\t\t/**\n\t\t * Event handler (attached declaratively) for the view delete button. Deletes the selected item. \n\t\t * @function\n\t\t * @public\n\t\t */\n\t\tonDelete: function() {\n\t\t\tvar that = this;\n\t\t\tvar oViewModel = this.g+
etModel(\"detailView\"),\n\t\t\t\tsPath = oViewModel.getProperty(\"/sObjectPath\"),\n\t\t\t\tsObjectHeader = this._oODataModel.getProperty(sPath + \"/department_name\"),\n\t\t\t\tsQuestion = this._oResourceBundle.getText(\"deleteText\", sObjectHeader),\n+
\t\t\t\tsSuccessMessage = this._oResourceBundle.getText(\"deleteSuccess\", sObjectHeader);\n\n\t\t\tvar fnMyAfterDeleted = function() {\n\t\t\t\tMessageToast.show(sSuccessMessage);\n\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\tvar oNextItem+
ToSelect = that.getOwnerComponent().oListSelector.findNextItem(sPath);\n\t\t\t\tthat.getModel(\"appView\").setProperty(\"/itemToSelect\", oNextItemToSelect.getBindingContext().getPath()); //save last deleted\n\t\t\t};\n\t\t\tthis._confirmDeletionByUser({+
\n\t\t\t\tquestion: sQuestion\n\t\t\t}, [sPath], fnMyAfterDeleted);\n\t\t},\n\n\t\t/**\n\t\t * Event handler (attached declaratively) for the view edit button. Open a view to enable the user update the selected item. \n\t\t * @function\n\t\t * @public\n\+
t\t */\n\t\tonEdit: function() {\n\t\t\tthis.getModel(\"appView\").setProperty(\"/addEnabled\", false);\n\t\t\tvar sObjectPath = this.getView().getElementBinding().getPath();\n\t\t\tthis.getRouter().getTargets().display(\"create\", {\n\t\t\t\tmode: \"upd+
ate\",\n\t\t\t\tobjectPath: sObjectPath\n\t\t\t});\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* begin: internal methods                                     */\n\t\t/* ===========================================+
================ */\n\n\t\t/**\n\t\t * Binds the view to the object path and expands the aggregated line items.\n\t\t * @function\n\t\t * @param {sap.ui.base.Event} oEvent pattern match event in route 'object'\n\t\t * @private\n\t\t */\n\t\t_onObjectMatc+
hed: function(oEvent) {\n\t\t\tvar oParameter = oEvent.getParameter(\"arguments\");\n\t\t\tfor (var value in oParameter) {\n\t\t\t\toParameter[value] = decodeURIComponent(oParameter[value]);\n\t\t\t}\n\t\t\tthis.getModel().metadataLoaded().then(function(+
) {\n\t\t\t\tvar sObjectPath = this.getModel().createKey(\"ZDEPARTMENTS_CDS\", oParameter);\n\t\t\t\tthis._bindView(\"/\" + sObjectPath);\n\t\t\t}.bind(this));\n\t\t},\n\n\t\t/**\n\t\t * Binds the view to the object path. Makes sure that detail view disp+
lays\n\t\t * a busy indicator while data for the corresponding element binding is loaded.\n\t\t * @function\n\t\t * @param {string} sObjectPath path to the object to be bound to the view.\n\t\t * @private\n\t\t */\n\t\t_bindView: function(sObjectPath) {\+
n\t\t\t// Set busy indicator during view binding\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\n\t\t\t// If the view was not bound yet its not busy, only if the binding requests data it is set to busy again\n\t\t\toViewModel.setProperty(\"/bus+
y\", false);\n\n\t\t\tthis.getView().bindElement({\n\t\t\t\tpath: sObjectPath,\n\t\t\t\tevents: {\n\t\t\t\t\tchange: this._onBindingChange.bind(this),\n\t\t\t\t\tdataRequested: function() {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\t\t\+
t},\n\t\t\t\t\tdataReceived: function() {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Event handler for binding change event\n\t\t * @function\n\t\t * @private\n\t\t */\n\n\t\t_onBi+
ndingChange: function() {\n\t\t\tvar oView = this.getView(),\n\t\t\t\toElementBinding = oView.getElementBinding(),\n\t\t\t\toViewModel = this.getModel(\"detailView\"),\n\t\t\t\toAppViewModel = this.getModel(\"appView\");\n\n\t\t\t// No data for the bindi+
ng\n\t\t\tif (!oElementBinding.getBoundContext()) {\n\t\t\t\tthis.getRouter().getTargets().display(\"detailObjectNotFound\");\n\t\t\t\t// if object could not be found, the selection in the master list\n\t\t\t\t// does not make sense anymore.\n\t\t\t\tthi+
s.getOwnerComponent().oListSelector.clearMasterListSelection();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar sPath = oElementBinding.getBoundContext().getPath(),\n\t\t\t\toResourceBundle = this.getResourceBundle(),\n\t\t\t\toObject = oView.getModel().getObject+
(sPath),\n\t\t\t\tsObjectId = oObject.department_id,\n\t\t\t\tsObjectName = oObject.department_name;\n\n\t\t\toViewModel.setProperty(\"/sObjectId\", sObjectId);\n\t\t\toViewModel.setProperty(\"/sObjectPath\", sPath);\n\t\t\toAppViewModel.setProperty(\"/i+
temToSelect\", sPath);\n\t\t\tthis.getOwnerComponent().oListSelector.selectAListItem(sPath);\n\n\t\t\toViewModel.setProperty(\"/saveAsTileTitle\", oResourceBundle.getText(\"shareSaveTileAppTitle\", [sObjectName]));\n\t\t\toViewModel.setProperty(\"/shareO+
nJamTitle\", sObjectName);\n\t\t\toViewModel.setProperty(\"/shareSendEmailSubject\",\n\t\t\t\toResourceBundle.getText(\"shareSendEmailObjectSubject\", [sObjectId]));\n\t\t\toViewModel.setProperty(\"/shareSendEmailMessage\",\n\t\t\t\toResourceBundle.getTe+
xt(\"shareSendEmailObjectMessage\", [sObjectName, sObjectId, location.href]));\n\t\t},\n\n\t\t/**\n\t\t * Event handler for metadata loaded event\n\t\t * @function\n\t\t * @private\n\t\t */\n\n\t\t_onMetadataLoaded: function() {\n\t\t\t// Store original +
busy indicator delay for the detail view\n\t\t\tvar iOriginalViewBusyDelay = this.getView().getBusyIndicatorDelay(),\n\t\t\t\toViewModel = this.getModel(\"detailView\");\n\n\t\t\t// Make sure busy indicator is displayed immediately when\n\t\t\t// detail +
view is displayed for the first time\n\t\t\toViewModel.setProperty(\"/delay\", 0);\n\n\t\t\t// Binding the view will set it to not busy - so the view is always busy if it is not bound\n\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\t// Restore orig+
inal busy indicator delay for the detail view\n\t\t\toViewModel.setProperty(\"/delay\", iOriginalViewBusyDelay);\n\t\t},\n\n\t\t/**\n\t\t * Opens a dialog letting the user either confirm or cancel the deletion of a list of entities\n\t\t * @param {object+
} oConfirmation - Possesses up to two attributes: question (obligatory) is a string providing the statement presented to the user.\n\t\t * title (optional) may be a string defining the title of the popup.\n\t\t * @param {object} oConfirmation - Possesses+
 up to two attributes: question (obligatory) is a string providing the statement presented to the user.\n\t\t * @param {array} aPaths -  Array of strings representing the context paths to the entities to be deleted. Currently only one is supported.\n\t\t+
 * @param {callback} fnAfterDeleted (optional) - called after deletion is done. \n\t\t * @param {callback} fnDeleteCanceled (optional) - called when the user decides not to perform the deletion\n\t\t * @param {callback} fnDeleteConfirmed (optional) - cal+
led when the user decides to perform the deletion. A Promise will be passed\n\t\t * @function\n\t\t * @private\n\t\t */\n\t\t/* eslint-disable */ // using more then 4 parameters for a function is justified here\n\t\t_confirmDeletionByUser: function(oConf+
irmation, aPaths, fnAfterDeleted, fnDeleteCanceled, fnDeleteConfirmed) {\n\t\t\t/* eslint-enable */\n\t\t\t// Callback function for when the user decides to perform the deletion\n\t\t\tvar fnDelete = function() {\n\t\t\t\t// Calls the oData Delete servic+
e\n\t\t\t\tthis._callDelete(aPaths, fnAfterDeleted);\n\t\t\t}.bind(this);\n\n\t\t\t// Opens the confirmation dialog\n\t\t\tMessageBox.show(oConfirmation.question, {\n\t\t\t\ticon: oConfirmation.icon || MessageBox.Icon.WARNING,\n\t\t\t\ttitle: oConfirmati+
on.title || this._oResourceBundle.getText(\"delete\"),\n\t\t\t\tactions: [MessageBox.Action.OK, MessageBox.Action.CANCEL],\n\t\t\t\tonClose: function(oAction) {\n\t\t\t\t\tif (oAction === MessageBox.Action.OK) {\n\t\t\t\t\t\tfnDelete();\n\t\t\t\t\t} else+
 if (fnDeleteCanceled) {\n\t\t\t\t\t\tfnDeleteCanceled();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Performs the deletion of a list of entities.\n\t\t * @param {array} aPaths -  Array of strings representing the context paths to the e+
ntities to be deleted. Currently only one is supported.\n\t\t * @param {callback} fnAfterDeleted (optional) - called after deletion is done. \n\t\t * @return a Promise that will be resolved as soon as the deletion process ended successfully.\n\t\t * @fun+
ction\n\t\t * @private\n\t\t */\n\t\t_callDelete: function(aPaths, fnAfterDeleted) {\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\tvar fnFailed = function() {\n\t\t\t\tthis._oODataModel.setU+
seBatch(true);\n\t\t\t}.bind(this);\n\t\t\tvar fnSuccess = function() {\n\t\t\t\tif (fnAfterDeleted) {\n\t\t\t\t\tfnAfterDeleted();\n\t\t\t\t\tthis._oODataModel.setUseBatch(true);\n\t\t\t\t}\n\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t}.bin+
d(this);\n\t\t\treturn this._deleteOneEntity(aPaths[0], fnSuccess, fnFailed);\n\t\t},\n\n\t\t/**\n\t\t * Deletes the entity from the odata model\n\t\t * @param {array} aPaths -  Array of strings representing the context paths to the entities to be delete+
d. Currently only one is supported.\n\t\t * @param {callback} fnSuccess - Event handler for success operation.\n\t\t * @param {callback} fnFailed - Event handler for failure operation.\n\t\t * @function\n\t\t * @private\n\t\t */\n\t\t_deleteOneEntity: fu+
nction(sPath, fnSuccess, fnFailed) {\n\t\t\tvar oPromise = new Promise(function(fnResolve, fnReject) {\n\t\t\t\tthis._oODataModel.setUseBatch(false);\n\t\t\t\tthis._oODataModel.remove(sPath, {\n\t\t\t\t\tsuccess: fnResolve,\n\t\t\t\t\terror: fnReject,\n\+
t\t\t\t\tasync: true\n\t\t\t\t});\n\t\t\t}.bind(this));\n\t\t\toPromise.then(fnSuccess, fnFailed);\n\t\t\treturn oPromise;\n\t\t}\n\n\t});\n});",                                                                                                              
		"masterclass/controller/BaseController.js": "/*global history */\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/core/routing/History\"\n], function(Controller, History) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"masterclass.c+
ontroller.BaseController\", {\n\t\t/**\n\t\t * Convenience method for accessing the router in every controller of the application.\n\t\t * @public\n\t\t * @returns {sap.ui.core.routing.Router} the router for this component\n\t\t */\n\t\tgetRouter: functi+
on() {\n\t\t\treturn this.getOwnerComponent().getRouter();\n\t\t},\n\n\t\t/**\n\t\t * Convenience method for getting the view model by name in every controller of the application.\n\t\t * @public\n\t\t * @param {string} sName the model name\n\t\t * @retu+
rns {sap.ui.model.Model} the model instance\n\t\t */\n\t\tgetModel: function(sName) {\n\t\t\treturn this.getView().getModel(sName);\n\t\t},\n\n\t\t/**\n\t\t * Convenience method for setting the view model in every controller of the application.\n\t\t * @+
public\n\t\t * @param {sap.ui.model.Model} oModel the model instance\n\t\t * @param {string} sName the model name\n\t\t * @returns {sap.ui.mvc.View} the view instance\n\t\t */\n\t\tsetModel: function(oModel, sName) {\n\t\t\treturn this.getView().setModel+
(oModel, sName);\n\t\t},\n\n\t\t/**\n\t\t * Convenience method for getting the resource bundle.\n\t\t * @public\n\t\t * @returns {sap.ui.model.resource.ResourceModel} the resourceModel of the component\n\t\t */\n\t\tgetResourceBundle: function() {\n\t\t\+
treturn this.getOwnerComponent().getModel(\"i18n\").getResourceBundle();\n\t\t},\n\n\t\t/**\n\t\t * Event handler  for navigating back.\n\t\t * It checks if there is a history entry. If yes, history.go(-1) will happen.\n\t\t * If not, it will replace the+
 current entry of the browser history with the master route.\n\t\t * @public\n\t\t */\n\t\tonNavBack: function() {\n\t\t\tvar sPreviousHash = History.getInstance().getPreviousHash();\n\n\t\t\tif (sPreviousHash !== undefined) {\n\t\t\t\t// The history con+
tains a previous entry\n\t\t\t\thistory.go(-1);\n\t\t\t} else {\n\t\t\t\t// Otherwise we go backwards with a forward history\n\t\t\t\tvar bReplace = true;\n\t\t\t\tthis.getRouter().navTo(\"master\", {}, bReplace);\n\t\t\t}\n\t\t}\n\n\t});\n\n});"         
	}                                                                                                                                                                                                                                                             
});                                                                                                                                                                                                                                                            